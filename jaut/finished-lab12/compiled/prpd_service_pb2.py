# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: prpd_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import prpd_common_pb2 as prpd__common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='prpd_service.proto',
  package='routing',
  syntax='proto3',
  serialized_pb=_b('\n\x12prpd_service.proto\x12\x07routing\x1a\x11prpd_common.proto\"$\n\x14RtPurgeConfigRequest\x12\x0c\n\x04time\x18\x01 \x01(\r\"\x10\n\x0eRtEmptyRequest\"4\n\x0bRtOperReply\x12%\n\x08ret_code\x18\x01 \x01(\x0e\x32\x13.routing.ReturnCode\"J\n\x13RtPurgeTimeGetReply\x12%\n\x08ret_code\x18\x01 \x01(\x0e\x32\x13.routing.ReturnCode\x12\x0c\n\x04time\x18\x02 \x01(\r2\xee\x01\n\x04\x42\x61se\x12M\n\x14RoutePurgeTimeConfig\x12\x1d.routing.RtPurgeConfigRequest\x1a\x14.routing.RtOperReply\"\x00\x12I\n\x16RoutePurgeTimeUnconfig\x12\x17.routing.RtEmptyRequest\x1a\x14.routing.RtOperReply\"\x00\x12L\n\x11RoutePurgeTimeGet\x12\x17.routing.RtEmptyRequest\x1a\x1c.routing.RtPurgeTimeGetReply\"\x00\x62\x06proto3')
  ,
  dependencies=[prpd__common__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_RTPURGECONFIGREQUEST = _descriptor.Descriptor(
  name='RtPurgeConfigRequest',
  full_name='routing.RtPurgeConfigRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='time', full_name='routing.RtPurgeConfigRequest.time', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=86,
)


_RTEMPTYREQUEST = _descriptor.Descriptor(
  name='RtEmptyRequest',
  full_name='routing.RtEmptyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=88,
  serialized_end=104,
)


_RTOPERREPLY = _descriptor.Descriptor(
  name='RtOperReply',
  full_name='routing.RtOperReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ret_code', full_name='routing.RtOperReply.ret_code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=106,
  serialized_end=158,
)


_RTPURGETIMEGETREPLY = _descriptor.Descriptor(
  name='RtPurgeTimeGetReply',
  full_name='routing.RtPurgeTimeGetReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ret_code', full_name='routing.RtPurgeTimeGetReply.ret_code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time', full_name='routing.RtPurgeTimeGetReply.time', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=160,
  serialized_end=234,
)

_RTOPERREPLY.fields_by_name['ret_code'].enum_type = prpd__common__pb2._RETURNCODE
_RTPURGETIMEGETREPLY.fields_by_name['ret_code'].enum_type = prpd__common__pb2._RETURNCODE
DESCRIPTOR.message_types_by_name['RtPurgeConfigRequest'] = _RTPURGECONFIGREQUEST
DESCRIPTOR.message_types_by_name['RtEmptyRequest'] = _RTEMPTYREQUEST
DESCRIPTOR.message_types_by_name['RtOperReply'] = _RTOPERREPLY
DESCRIPTOR.message_types_by_name['RtPurgeTimeGetReply'] = _RTPURGETIMEGETREPLY

RtPurgeConfigRequest = _reflection.GeneratedProtocolMessageType('RtPurgeConfigRequest', (_message.Message,), dict(
  DESCRIPTOR = _RTPURGECONFIGREQUEST,
  __module__ = 'prpd_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.RtPurgeConfigRequest)
  ))
_sym_db.RegisterMessage(RtPurgeConfigRequest)

RtEmptyRequest = _reflection.GeneratedProtocolMessageType('RtEmptyRequest', (_message.Message,), dict(
  DESCRIPTOR = _RTEMPTYREQUEST,
  __module__ = 'prpd_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.RtEmptyRequest)
  ))
_sym_db.RegisterMessage(RtEmptyRequest)

RtOperReply = _reflection.GeneratedProtocolMessageType('RtOperReply', (_message.Message,), dict(
  DESCRIPTOR = _RTOPERREPLY,
  __module__ = 'prpd_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.RtOperReply)
  ))
_sym_db.RegisterMessage(RtOperReply)

RtPurgeTimeGetReply = _reflection.GeneratedProtocolMessageType('RtPurgeTimeGetReply', (_message.Message,), dict(
  DESCRIPTOR = _RTPURGETIMEGETREPLY,
  __module__ = 'prpd_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.RtPurgeTimeGetReply)
  ))
_sym_db.RegisterMessage(RtPurgeTimeGetReply)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class BaseStub(object):
    """*
    ---------------------------------------------------------------
    APIs for the RPD Infra Operations
    ---------------------------------------------------------------
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.RoutePurgeTimeConfig = channel.unary_unary(
          '/routing.Base/RoutePurgeTimeConfig',
          request_serializer=RtPurgeConfigRequest.SerializeToString,
          response_deserializer=RtOperReply.FromString,
          )
      self.RoutePurgeTimeUnconfig = channel.unary_unary(
          '/routing.Base/RoutePurgeTimeUnconfig',
          request_serializer=RtEmptyRequest.SerializeToString,
          response_deserializer=RtOperReply.FromString,
          )
      self.RoutePurgeTimeGet = channel.unary_unary(
          '/routing.Base/RoutePurgeTimeGet',
          request_serializer=RtEmptyRequest.SerializeToString,
          response_deserializer=RtPurgeTimeGetReply.FromString,
          )


  class BaseServicer(object):
    """*
    ---------------------------------------------------------------
    APIs for the RPD Infra Operations
    ---------------------------------------------------------------
    """

    def RoutePurgeTimeConfig(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to configure purge timer for the client
      ---------------------------------------------------------------

      Configure a purge timer for the client so that server side will retain
      the client installed routes till this time after client disconnects and
      provide sufficient time for the client to reconnect if possible.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RoutePurgeTimeUnconfig(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to unconfigure purge timer for the client
      ---------------------------------------------------------------

      Unconfigure a previously configured purge timer for the client.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RoutePurgeTimeGet(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to retrive the purge timer for the client
      ---------------------------------------------------------------

      Get a purge timer for the client
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RoutePurgeTimeConfig': grpc.unary_unary_rpc_method_handler(
            servicer.RoutePurgeTimeConfig,
            request_deserializer=RtPurgeConfigRequest.FromString,
            response_serializer=RtOperReply.SerializeToString,
        ),
        'RoutePurgeTimeUnconfig': grpc.unary_unary_rpc_method_handler(
            servicer.RoutePurgeTimeUnconfig,
            request_deserializer=RtEmptyRequest.FromString,
            response_serializer=RtOperReply.SerializeToString,
        ),
        'RoutePurgeTimeGet': grpc.unary_unary_rpc_method_handler(
            servicer.RoutePurgeTimeGet,
            request_deserializer=RtEmptyRequest.FromString,
            response_serializer=RtPurgeTimeGetReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'routing.Base', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBaseServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    ---------------------------------------------------------------
    APIs for the RPD Infra Operations
    ---------------------------------------------------------------
    """
    def RoutePurgeTimeConfig(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to configure purge timer for the client
      ---------------------------------------------------------------

      Configure a purge timer for the client so that server side will retain
      the client installed routes till this time after client disconnects and
      provide sufficient time for the client to reconnect if possible.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RoutePurgeTimeUnconfig(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to unconfigure purge timer for the client
      ---------------------------------------------------------------

      Unconfigure a previously configured purge timer for the client.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RoutePurgeTimeGet(self, request, context):
      """*
      ---------------------------------------------------------------
      Service to retrive the purge timer for the client
      ---------------------------------------------------------------

      Get a purge timer for the client
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBaseStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    ---------------------------------------------------------------
    APIs for the RPD Infra Operations
    ---------------------------------------------------------------
    """
    def RoutePurgeTimeConfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """*
      ---------------------------------------------------------------
      Service to configure purge timer for the client
      ---------------------------------------------------------------

      Configure a purge timer for the client so that server side will retain
      the client installed routes till this time after client disconnects and
      provide sufficient time for the client to reconnect if possible.
      """
      raise NotImplementedError()
    RoutePurgeTimeConfig.future = None
    def RoutePurgeTimeUnconfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """*
      ---------------------------------------------------------------
      Service to unconfigure purge timer for the client
      ---------------------------------------------------------------

      Unconfigure a previously configured purge timer for the client.
      """
      raise NotImplementedError()
    RoutePurgeTimeUnconfig.future = None
    def RoutePurgeTimeGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """*
      ---------------------------------------------------------------
      Service to retrive the purge timer for the client
      ---------------------------------------------------------------

      Get a purge timer for the client
      """
      raise NotImplementedError()
    RoutePurgeTimeGet.future = None


  def beta_create_Base_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('routing.Base', 'RoutePurgeTimeConfig'): RtPurgeConfigRequest.FromString,
      ('routing.Base', 'RoutePurgeTimeGet'): RtEmptyRequest.FromString,
      ('routing.Base', 'RoutePurgeTimeUnconfig'): RtEmptyRequest.FromString,
    }
    response_serializers = {
      ('routing.Base', 'RoutePurgeTimeConfig'): RtOperReply.SerializeToString,
      ('routing.Base', 'RoutePurgeTimeGet'): RtPurgeTimeGetReply.SerializeToString,
      ('routing.Base', 'RoutePurgeTimeUnconfig'): RtOperReply.SerializeToString,
    }
    method_implementations = {
      ('routing.Base', 'RoutePurgeTimeConfig'): face_utilities.unary_unary_inline(servicer.RoutePurgeTimeConfig),
      ('routing.Base', 'RoutePurgeTimeGet'): face_utilities.unary_unary_inline(servicer.RoutePurgeTimeGet),
      ('routing.Base', 'RoutePurgeTimeUnconfig'): face_utilities.unary_unary_inline(servicer.RoutePurgeTimeUnconfig),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Base_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('routing.Base', 'RoutePurgeTimeConfig'): RtPurgeConfigRequest.SerializeToString,
      ('routing.Base', 'RoutePurgeTimeGet'): RtEmptyRequest.SerializeToString,
      ('routing.Base', 'RoutePurgeTimeUnconfig'): RtEmptyRequest.SerializeToString,
    }
    response_deserializers = {
      ('routing.Base', 'RoutePurgeTimeConfig'): RtOperReply.FromString,
      ('routing.Base', 'RoutePurgeTimeGet'): RtPurgeTimeGetReply.FromString,
      ('routing.Base', 'RoutePurgeTimeUnconfig'): RtOperReply.FromString,
    }
    cardinalities = {
      'RoutePurgeTimeConfig': cardinality.Cardinality.UNARY_UNARY,
      'RoutePurgeTimeGet': cardinality.Cardinality.UNARY_UNARY,
      'RoutePurgeTimeUnconfig': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'routing.Base', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
