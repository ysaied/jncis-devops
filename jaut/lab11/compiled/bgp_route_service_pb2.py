# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bgp_route_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import jnx_addr_pb2 as jnx__addr__pb2
import prpd_common_pb2 as prpd__common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='bgp_route_service.proto',
  package='routing',
  syntax='proto3',
  serialized_pb=_b('\n\x17\x62gp_route_service.proto\x12\x07routing\x1a\x0ejnx_addr.proto\x1a\x11prpd_common.proto\"]\n\x16\x42gpRouteOperationFlags\x12\x14\n\x0cno_advertise\x18\x01 \x01(\x08\x12\x11\n\tno_export\x18\x02 \x01(\x08\x12\x1a\n\x12use_nexthop_reject\x18\x03 \x01(\x08\"\x1c\n\x0b\x42gpAttrib32\x12\r\n\x05value\x18\x01 \x01(\r\"\x1c\n\x0b\x42gpAttrib64\x12\r\n\x05value\x18\x01 \x01(\x04\"%\n\tCommunity\x12\x18\n\x10\x63ommunity_string\x18\x01 \x01(\t\"5\n\rCommunityList\x12$\n\x08\x63om_list\x18\x01 \x03(\x0b\x32\x12.routing.Community\"\x1f\n\x06\x41sPath\x12\x15\n\raspath_string\x18\x01 \x01(\t\"\xe3\x01\n\rBgpRouteMatch\x12)\n\x0b\x64\x65st_prefix\x18\x01 \x01(\x0b\x32\x14.routing.RoutePrefix\x12\x17\n\x0f\x64\x65st_prefix_len\x18\x02 \x01(\r\x12\"\n\x05table\x18\x03 \x01(\x0b\x32\x13.routing.RouteTable\x12(\n\x08protocol\x18\x04 \x01(\x0e\x32\x16.routing.RouteProtocol\x12\x13\n\x0bpath_cookie\x18\x05 \x01(\x04\x12+\n\x0b\x63ommunities\x18\x06 \x01(\x0b\x32\x16.routing.CommunityList\"\xe4\x06\n\rBgpRouteEntry\x12)\n\x0b\x64\x65st_prefix\x18\x01 \x01(\x0b\x32\x14.routing.RoutePrefix\x12\x17\n\x0f\x64\x65st_prefix_len\x18\x02 \x01(\r\x12\"\n\x05table\x18\x03 \x01(\x0b\x32\x13.routing.RouteTable\x12(\n\x08protocol\x18\x04 \x01(\x0e\x32\x16.routing.RouteProtocol\x12\x13\n\x0bpath_cookie\x18\x05 \x01(\x04\x12.\n\x10route_preference\x18\x06 \x01(\x0b\x32\x14.routing.BgpAttrib32\x12.\n\x10local_preference\x18\x07 \x01(\x0b\x32\x14.routing.BgpAttrib32\x12!\n\x03med\x18\x08 \x01(\x0b\x32\x14.routing.BgpAttrib32\x12+\n\raigp_distance\x18\t \x01(\x0b\x32\x14.routing.BgpAttrib64\x12\x13\n\tvpn_label\x18\n \x01(\rH\x00\x12%\n\x06labels\x18\x0b \x01(\x0b\x32\x13.routing.LabelStackH\x00\x12+\n\x0b\x63ommunities\x18\x0c \x01(\x0b\x32\x16.routing.CommunityList\x12\x1f\n\x06\x61spath\x18\r \x01(\x0b\x32\x0f.routing.AsPath\x12+\n\roriginator_id\x18\x0e \x01(\x0b\x32\x14.routing.BgpAttrib32\x12*\n\x0c\x63luster_list\x18\x0f \x03(\x0b\x32\x14.routing.BgpAttrib32\x12(\n\ncluster_id\x18\x10 \x01(\x0b\x32\x14.routing.BgpAttrib32\x12\x1b\n\x0froute_oper_flag\x18\x11 \x01(\rB\x02\x18\x01\x12-\n\x11protocol_nexthops\x18\x12 \x03(\x0b\x32\x12.jnxBase.IpAddress\x12(\n\nroute_type\x18\x13 \x01(\x0e\x32\x14.routing.BgpPeerType\x12\x34\n\x0broute_flags\x18\x14 \x01(\x0b\x32\x1f.routing.BgpRouteOperationFlags\x12\x36\n\nroute_data\x18\x15 \x01(\x0b\x32\".routing.AddressFamilySpecificDataB\x0b\n\tLabelInfo\"\xd3\x01\n\x14\x42gpRouteMonitorEntry\x12\x44\n\toperation\x18\x01 \x01(\x0e\x32\x31.routing.BgpRouteMonitorEntry.BgpRouteMonitorOper\x12)\n\tbgp_route\x18\x02 \x01(\x0b\x32\x16.routing.BgpRouteEntry\"J\n\x13\x42gpRouteMonitorOper\x12\x10\n\x0cROUTE_UPDATE\x10\x00\x12\x10\n\x0cROUTE_REMOVE\x10\x01\x12\x0f\n\x0b\x45ND_OF_RIBS\x10\x02\"\x1b\n\x19\x42gpRouteInitializeRequest\"\xa8\x02\n\x17\x42gpRouteInitializeReply\x12I\n\x06status\x18\x01 \x01(\x0e\x32\x39.routing.BgpRouteInitializeReply.BgpRouteInitializeStatus\x12\x13\n\x0bgw_n_routes\x18\x02 \x01(\r\"\xac\x01\n\x18\x42gpRouteInitializeStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x19\n\x15SUCCESS_STATE_REBOUND\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\x12\x17\n\x13\x41LREADY_INITIALIZED\x10\x03\x12\x13\n\x0fGATEWAY_INVALID\x10\x04\x12\x13\n\x0f\x43LEANUP_PENDING\x10\x05\x12\x11\n\rBGP_NOT_READY\x10\x06\"\x18\n\x16\x42gpRouteCleanupRequest\"\xaa\x01\n\x14\x42gpRouteCleanupReply\x12\x43\n\x06status\x18\x01 \x01(\x0e\x32\x33.routing.BgpRouteCleanupReply.BgpRouteCleanupStatus\"M\n\x15\x42gpRouteCleanupStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\"C\n\x15\x42gpRouteUpdateRequest\x12*\n\nbgp_routes\x18\x01 \x03(\x0b\x32\x16.routing.BgpRouteEntry\"V\n\x15\x42gpRouteRemoveRequest\x12\x11\n\tor_longer\x18\x01 \x01(\x08\x12*\n\nbgp_routes\x18\x02 \x03(\x0b\x32\x16.routing.BgpRouteMatch\"\xe9\x01\n\x12\x42gpRouteGetRequest\x12)\n\tbgp_route\x18\x01 \x01(\x0b\x32\x16.routing.BgpRouteMatch\x12\x11\n\tor_longer\x18\x02 \x01(\x08\x12\x13\n\x0b\x61\x63tive_only\x18\x03 \x01(\x08\x12\x34\n\x14reply_address_format\x18\x04 \x01(\x0e\x32\x16.jnxBase.AddressFormat\x12\x35\n\x12reply_table_format\x18\x05 \x01(\x0e\x32\x19.routing.RouteTableFormat\x12\x13\n\x0broute_count\x18\x06 \x01(\r\"\xe9\x06\n\x11\x42gpRouteOperReply\x12=\n\x06status\x18\x01 \x01(\x0e\x32-.routing.BgpRouteOperReply.BgpRouteOperStatus\x12\x1c\n\x14operations_completed\x18\x02 \x01(\r\"\xf6\x05\n\x12\x42gpRouteOperStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\x12\t\n\x05NO_OP\x10\x03\x12\x10\n\x0cTOO_MANY_OPS\x10\x04\x12\x11\n\rTABLE_INVALID\x10\x05\x12\x13\n\x0fTABLE_NOT_READY\x10\x06\x12\x12\n\x0ePREFIX_INVALID\x10\x07\x12\x18\n\x14PREFIX_LEN_TOO_SHORT\x10\x08\x12\x17\n\x13PREFIX_LEN_TOO_LONG\x10\t\x12\x13\n\x0fGATEWAY_INVALID\x10\n\x12\x13\n\x0fNEXTHOP_INVALID\x10\x0b\x12\x1b\n\x17NEXTHOP_ADDRESS_INVALID\x10\x0c\x12\x16\n\x12NEXTHOP_ECMP_LIMIT\x10\r\x12\x1a\n\x16\x43OMMUNITY_LIST_INVALID\x10\x0e\x12\x12\n\x0e\x41SPATH_INVALID\x10\x0f\x12\x16\n\x12LABEL_INFO_INVALID\x10\x10\x12\x10\n\x0cROUTE_EXISTS\x10\x11\x12\x13\n\x0fROUTE_NOT_FOUND\x10\x12\x12\x18\n\x14\x43LUSTER_LIST_INVALID\x10\x13\x12\x14\n\x10PROTOCOL_INVALID\x10\x14\x12\x14\n\x10ROUTE_ADD_FAILED\x10\x15\x12\x11\n\rBGP_NOT_READY\x10\x16\x12\r\n\tTRY_AGAIN\x10\x17\x12\x17\n\x13REQUEST_UNSUPPORTED\x10\x18\x12\x15\n\x11PEER_TYPE_INVALID\x10\x19\x12\x18\n\x14SEGMENT_LIST_INVALID\x10\x1a\x12\x13\n\x0fSEGMENT_INVALID\x10\x1b\x12\x19\n\x15SEGMENT_LABEL_INVALID\x10\x1c\x12\x16\n\x12SEGMENT_ID_INVALID\x10\x1d\x12\x1e\n\x1aSEGMENT_LIST_COUNT_INVALID\x10\x1e\x12\x19\n\x15SEGMENT_COUNT_INVALID\x10\x1f\x12\x1b\n\x17SRTE_ROUTE_DATA_INVALID\x10 \"\xd1\x03\n\x10\x42gpRouteGetReply\x12;\n\x06status\x18\x01 \x01(\x0e\x32+.routing.BgpRouteGetReply.BgpRouteGetStatus\x12*\n\nbgp_routes\x18\x02 \x03(\x0b\x32\x16.routing.BgpRouteEntry\"\xd3\x02\n\x11\x42gpRouteGetStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\x12\x11\n\rTABLE_INVALID\x10\x03\x12\x13\n\x0fTABLE_NOT_READY\x10\x04\x12\x12\n\x0ePREFIX_INVALID\x10\x05\x12\x18\n\x14PREFIX_LEN_TOO_SHORT\x10\x06\x12\x17\n\x13PREFIX_LEN_TOO_LONG\x10\x07\x12\x13\n\x0fROUTE_NOT_FOUND\x10\x08\x12\x14\n\x10PROTOCOL_INVALID\x10\t\x12\x11\n\rROUTE_INVALID\x10\n\x12\x17\n\x13REQUEST_UNSUPPORTED\x10\x0b\x12\r\n\tTRY_AGAIN\x10\x0c\x12\x17\n\x13ROUTE_COUNT_INVALID\x10\r\x12\x1a\n\x16\x43OMMUNITY_LIST_INVALID\x10\x0e\"\xa2\x01\n\x1e\x42gpRouteMonitorRegisterRequest\x12\x34\n\x14reply_address_format\x18\x01 \x01(\x0e\x32\x16.jnxBase.AddressFormat\x12\x35\n\x12reply_table_format\x18\x02 \x01(\x0e\x32\x19.routing.RouteTableFormat\x12\x13\n\x0broute_count\x18\x03 \x01(\r\"\x86\x03\n\x1c\x42gpRouteMonitorRegisterReply\x12S\n\x06status\x18\x01 \x01(\x0e\x32\x43.routing.BgpRouteMonitorRegisterReply.BgpRouteMonitorRegisterStatus\x12\x36\n\x0fmonitor_entries\x18\x02 \x03(\x0b\x32\x1d.routing.BgpRouteMonitorEntry\"\xd8\x01\n\x1d\x42gpRouteMonitorRegisterStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\x12\x1a\n\x16REGISTRATIONS_EXCEEDED\x10\x03\x12\x16\n\x12\x41LREADY_REGISTERED\x10\x04\x12\x17\n\x13ROUTE_COUNT_INVALID\x10\x05\x12\x1a\n\x16\x41\x44\x44RESS_FORMAT_INVALID\x10\x06\x12\x18\n\x14TABLE_FORMAT_INVALID\x10\x07\"\"\n BgpRouteMonitorUnregisterRequest\"\xe6\x01\n\x1e\x42gpRouteMonitorUnregisterReply\x12W\n\x06status\x18\x01 \x01(\x0e\x32G.routing.BgpRouteMonitorUnregisterReply.BgpRouteMonitorUnregisterStatus\"k\n\x1f\x42gpRouteMonitorUnregisterStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\x12\x12\n\x0eNOT_REGISTERED\x10\x03\"\x1f\n\x1d\x42gpRouteMonitorRefreshRequest\"\xda\x01\n\x1b\x42gpRouteMonitorRefreshReply\x12Q\n\x06status\x18\x01 \x01(\x0e\x32\x41.routing.BgpRouteMonitorRefreshReply.BgpRouteMonitorRefreshStatus\"h\n\x1c\x42gpRouteMonitorRefreshStatus\x12\x0b\n\x07SUCCESS\x10\x00\x12\x12\n\x0eINTERNAL_ERROR\x10\x01\x12\x13\n\x0fNOT_INITIALIZED\x10\x02\x12\x12\n\x0eNOT_REGISTERED\x10\x03*K\n\rRouteProtocol\x12\x15\n\x11PROTO_UNSPECIFIED\x10\x00\x12\r\n\tPROTO_BGP\x10\x01\x12\x14\n\x10PROTO_BGP_STATIC\x10\x02*e\n\x0eRouteOperation\x12\x13\n\x0bUNSPECIFIED\x10\x00\x1a\x02\x08\x01\x12\x14\n\x0cNO_ADVERTISE\x10\x01\x1a\x02\x08\x01\x12\x11\n\tNO_EXPORT\x10\x02\x1a\x02\x08\x01\x12\x15\n\rUSE_NH_REJECT\x10\x04\x1a\x02\x08\x01*1\n\x0b\x42gpPeerType\x12\x10\n\x0c\x42GP_INTERNAL\x10\x00\x12\x10\n\x0c\x42GP_EXTERNAL\x10\x01\x32\x91\x07\n\x08\x42gpRoute\x12\\\n\x12\x42gpRouteInitialize\x12\".routing.BgpRouteInitializeRequest\x1a .routing.BgpRouteInitializeReply\"\x00\x12S\n\x0f\x42gpRouteCleanup\x12\x1f.routing.BgpRouteCleanupRequest\x1a\x1d.routing.BgpRouteCleanupReply\"\x00\x12K\n\x0b\x42gpRouteAdd\x12\x1e.routing.BgpRouteUpdateRequest\x1a\x1a.routing.BgpRouteOperReply\"\x00\x12N\n\x0e\x42gpRouteModify\x12\x1e.routing.BgpRouteUpdateRequest\x1a\x1a.routing.BgpRouteOperReply\"\x00\x12N\n\x0e\x42gpRouteUpdate\x12\x1e.routing.BgpRouteUpdateRequest\x1a\x1a.routing.BgpRouteOperReply\"\x00\x12N\n\x0e\x42gpRouteRemove\x12\x1e.routing.BgpRouteRemoveRequest\x1a\x1a.routing.BgpRouteOperReply\"\x00\x12I\n\x0b\x42gpRouteGet\x12\x1b.routing.BgpRouteGetRequest\x1a\x19.routing.BgpRouteGetReply\"\x00\x30\x01\x12m\n\x17\x42gpRouteMonitorRegister\x12\'.routing.BgpRouteMonitorRegisterRequest\x1a%.routing.BgpRouteMonitorRegisterReply\"\x00\x30\x01\x12q\n\x19\x42gpRouteMonitorUnregister\x12).routing.BgpRouteMonitorUnregisterRequest\x1a\'.routing.BgpRouteMonitorUnregisterReply\"\x00\x12h\n\x16\x42gpRouteMonitorRefresh\x12&.routing.BgpRouteMonitorRefreshRequest\x1a$.routing.BgpRouteMonitorRefreshReply\"\x00\x62\x06proto3')
  ,
  dependencies=[jnx__addr__pb2.DESCRIPTOR,prpd__common__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_ROUTEPROTOCOL = _descriptor.EnumDescriptor(
  name='RouteProtocol',
  full_name='routing.RouteProtocol',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PROTO_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTO_BGP', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTO_BGP_STATIC', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=5013,
  serialized_end=5088,
)
_sym_db.RegisterEnumDescriptor(_ROUTEPROTOCOL)

RouteProtocol = enum_type_wrapper.EnumTypeWrapper(_ROUTEPROTOCOL)
_ROUTEOPERATION = _descriptor.EnumDescriptor(
  name='RouteOperation',
  full_name='routing.RouteOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNSPECIFIED', index=0, number=0,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NO_ADVERTISE', index=1, number=1,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NO_EXPORT', index=2, number=2,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001')),
      type=None),
    _descriptor.EnumValueDescriptor(
      name='USE_NH_REJECT', index=3, number=4,
      options=_descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001')),
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=5090,
  serialized_end=5191,
)
_sym_db.RegisterEnumDescriptor(_ROUTEOPERATION)

RouteOperation = enum_type_wrapper.EnumTypeWrapper(_ROUTEOPERATION)
_BGPPEERTYPE = _descriptor.EnumDescriptor(
  name='BgpPeerType',
  full_name='routing.BgpPeerType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BGP_INTERNAL', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BGP_EXTERNAL', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=5193,
  serialized_end=5242,
)
_sym_db.RegisterEnumDescriptor(_BGPPEERTYPE)

BgpPeerType = enum_type_wrapper.EnumTypeWrapper(_BGPPEERTYPE)
PROTO_UNSPECIFIED = 0
PROTO_BGP = 1
PROTO_BGP_STATIC = 2
UNSPECIFIED = 0
NO_ADVERTISE = 1
NO_EXPORT = 2
USE_NH_REJECT = 4
BGP_INTERNAL = 0
BGP_EXTERNAL = 1


_BGPROUTEMONITORENTRY_BGPROUTEMONITOROPER = _descriptor.EnumDescriptor(
  name='BgpRouteMonitorOper',
  full_name='routing.BgpRouteMonitorEntry.BgpRouteMonitorOper',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ROUTE_UPDATE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_REMOVE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='END_OF_RIBS', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1592,
  serialized_end=1666,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEMONITORENTRY_BGPROUTEMONITOROPER)

_BGPROUTEINITIALIZEREPLY_BGPROUTEINITIALIZESTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteInitializeStatus',
  full_name='routing.BgpRouteInitializeReply.BgpRouteInitializeStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUCCESS_STATE_REBOUND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALREADY_INITIALIZED', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GATEWAY_INVALID', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLEANUP_PENDING', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BGP_NOT_READY', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1822,
  serialized_end=1994,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEINITIALIZEREPLY_BGPROUTEINITIALIZESTATUS)

_BGPROUTECLEANUPREPLY_BGPROUTECLEANUPSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteCleanupStatus',
  full_name='routing.BgpRouteCleanupReply.BgpRouteCleanupStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2116,
  serialized_end=2193,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTECLEANUPREPLY_BGPROUTECLEANUPSTATUS)

_BGPROUTEOPERREPLY_BGPROUTEOPERSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteOperStatus',
  full_name='routing.BgpRouteOperReply.BgpRouteOperStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NO_OP', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TOO_MANY_OPS', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE_INVALID', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE_NOT_READY', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_INVALID', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_LEN_TOO_SHORT', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_LEN_TOO_LONG', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GATEWAY_INVALID', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEXTHOP_INVALID', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEXTHOP_ADDRESS_INVALID', index=12, number=12,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEXTHOP_ECMP_LIMIT', index=13, number=13,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COMMUNITY_LIST_INVALID', index=14, number=14,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ASPATH_INVALID', index=15, number=15,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LABEL_INFO_INVALID', index=16, number=16,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_EXISTS', index=17, number=17,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_NOT_FOUND', index=18, number=18,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CLUSTER_LIST_INVALID', index=19, number=19,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_INVALID', index=20, number=20,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_ADD_FAILED', index=21, number=21,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BGP_NOT_READY', index=22, number=22,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRY_AGAIN', index=23, number=23,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REQUEST_UNSUPPORTED', index=24, number=24,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PEER_TYPE_INVALID', index=25, number=25,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_LIST_INVALID', index=26, number=26,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_INVALID', index=27, number=27,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_LABEL_INVALID', index=28, number=28,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_ID_INVALID', index=29, number=29,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_LIST_COUNT_INVALID', index=30, number=30,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEGMENT_COUNT_INVALID', index=31, number=31,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SRTE_ROUTE_DATA_INVALID', index=32, number=32,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2704,
  serialized_end=3462,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEOPERREPLY_BGPROUTEOPERSTATUS)

_BGPROUTEGETREPLY_BGPROUTEGETSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteGetStatus',
  full_name='routing.BgpRouteGetReply.BgpRouteGetStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE_INVALID', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE_NOT_READY', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_INVALID', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_LEN_TOO_SHORT', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREFIX_LEN_TOO_LONG', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_NOT_FOUND', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_INVALID', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_INVALID', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REQUEST_UNSUPPORTED', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRY_AGAIN', index=12, number=12,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_COUNT_INVALID', index=13, number=13,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COMMUNITY_LIST_INVALID', index=14, number=14,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3591,
  serialized_end=3930,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEGETREPLY_BGPROUTEGETSTATUS)

_BGPROUTEMONITORREGISTERREPLY_BGPROUTEMONITORREGISTERSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteMonitorRegisterStatus',
  full_name='routing.BgpRouteMonitorRegisterReply.BgpRouteMonitorRegisterStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REGISTRATIONS_EXCEEDED', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALREADY_REGISTERED', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ROUTE_COUNT_INVALID', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADDRESS_FORMAT_INVALID', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE_FORMAT_INVALID', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4272,
  serialized_end=4488,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEMONITORREGISTERREPLY_BGPROUTEMONITORREGISTERSTATUS)

_BGPROUTEMONITORUNREGISTERREPLY_BGPROUTEMONITORUNREGISTERSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteMonitorUnregisterStatus',
  full_name='routing.BgpRouteMonitorUnregisterReply.BgpRouteMonitorUnregisterStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_REGISTERED', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4650,
  serialized_end=4757,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEMONITORUNREGISTERREPLY_BGPROUTEMONITORUNREGISTERSTATUS)

_BGPROUTEMONITORREFRESHREPLY_BGPROUTEMONITORREFRESHSTATUS = _descriptor.EnumDescriptor(
  name='BgpRouteMonitorRefreshStatus',
  full_name='routing.BgpRouteMonitorRefreshReply.BgpRouteMonitorRefreshStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERNAL_ERROR', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_INITIALIZED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_REGISTERED', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4907,
  serialized_end=5011,
)
_sym_db.RegisterEnumDescriptor(_BGPROUTEMONITORREFRESHREPLY_BGPROUTEMONITORREFRESHSTATUS)


_BGPROUTEOPERATIONFLAGS = _descriptor.Descriptor(
  name='BgpRouteOperationFlags',
  full_name='routing.BgpRouteOperationFlags',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='no_advertise', full_name='routing.BgpRouteOperationFlags.no_advertise', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='no_export', full_name='routing.BgpRouteOperationFlags.no_export', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='use_nexthop_reject', full_name='routing.BgpRouteOperationFlags.use_nexthop_reject', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=71,
  serialized_end=164,
)


_BGPATTRIB32 = _descriptor.Descriptor(
  name='BgpAttrib32',
  full_name='routing.BgpAttrib32',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='routing.BgpAttrib32.value', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=166,
  serialized_end=194,
)


_BGPATTRIB64 = _descriptor.Descriptor(
  name='BgpAttrib64',
  full_name='routing.BgpAttrib64',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='routing.BgpAttrib64.value', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=196,
  serialized_end=224,
)


_COMMUNITY = _descriptor.Descriptor(
  name='Community',
  full_name='routing.Community',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='community_string', full_name='routing.Community.community_string', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=226,
  serialized_end=263,
)


_COMMUNITYLIST = _descriptor.Descriptor(
  name='CommunityList',
  full_name='routing.CommunityList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='com_list', full_name='routing.CommunityList.com_list', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=265,
  serialized_end=318,
)


_ASPATH = _descriptor.Descriptor(
  name='AsPath',
  full_name='routing.AsPath',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='aspath_string', full_name='routing.AsPath.aspath_string', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=320,
  serialized_end=351,
)


_BGPROUTEMATCH = _descriptor.Descriptor(
  name='BgpRouteMatch',
  full_name='routing.BgpRouteMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dest_prefix', full_name='routing.BgpRouteMatch.dest_prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dest_prefix_len', full_name='routing.BgpRouteMatch.dest_prefix_len', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table', full_name='routing.BgpRouteMatch.table', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='protocol', full_name='routing.BgpRouteMatch.protocol', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path_cookie', full_name='routing.BgpRouteMatch.path_cookie', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='communities', full_name='routing.BgpRouteMatch.communities', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=354,
  serialized_end=581,
)


_BGPROUTEENTRY = _descriptor.Descriptor(
  name='BgpRouteEntry',
  full_name='routing.BgpRouteEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dest_prefix', full_name='routing.BgpRouteEntry.dest_prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dest_prefix_len', full_name='routing.BgpRouteEntry.dest_prefix_len', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table', full_name='routing.BgpRouteEntry.table', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='protocol', full_name='routing.BgpRouteEntry.protocol', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path_cookie', full_name='routing.BgpRouteEntry.path_cookie', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_preference', full_name='routing.BgpRouteEntry.route_preference', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='local_preference', full_name='routing.BgpRouteEntry.local_preference', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='med', full_name='routing.BgpRouteEntry.med', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aigp_distance', full_name='routing.BgpRouteEntry.aigp_distance', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vpn_label', full_name='routing.BgpRouteEntry.vpn_label', index=9,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='labels', full_name='routing.BgpRouteEntry.labels', index=10,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='communities', full_name='routing.BgpRouteEntry.communities', index=11,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aspath', full_name='routing.BgpRouteEntry.aspath', index=12,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='originator_id', full_name='routing.BgpRouteEntry.originator_id', index=13,
      number=14, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cluster_list', full_name='routing.BgpRouteEntry.cluster_list', index=14,
      number=15, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cluster_id', full_name='routing.BgpRouteEntry.cluster_id', index=15,
      number=16, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_oper_flag', full_name='routing.BgpRouteEntry.route_oper_flag', index=16,
      number=17, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))),
    _descriptor.FieldDescriptor(
      name='protocol_nexthops', full_name='routing.BgpRouteEntry.protocol_nexthops', index=17,
      number=18, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_type', full_name='routing.BgpRouteEntry.route_type', index=18,
      number=19, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_flags', full_name='routing.BgpRouteEntry.route_flags', index=19,
      number=20, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_data', full_name='routing.BgpRouteEntry.route_data', index=20,
      number=21, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='LabelInfo', full_name='routing.BgpRouteEntry.LabelInfo',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=584,
  serialized_end=1452,
)


_BGPROUTEMONITORENTRY = _descriptor.Descriptor(
  name='BgpRouteMonitorEntry',
  full_name='routing.BgpRouteMonitorEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operation', full_name='routing.BgpRouteMonitorEntry.operation', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bgp_route', full_name='routing.BgpRouteMonitorEntry.bgp_route', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEMONITORENTRY_BGPROUTEMONITOROPER,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1455,
  serialized_end=1666,
)


_BGPROUTEINITIALIZEREQUEST = _descriptor.Descriptor(
  name='BgpRouteInitializeRequest',
  full_name='routing.BgpRouteInitializeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1668,
  serialized_end=1695,
)


_BGPROUTEINITIALIZEREPLY = _descriptor.Descriptor(
  name='BgpRouteInitializeReply',
  full_name='routing.BgpRouteInitializeReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteInitializeReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='gw_n_routes', full_name='routing.BgpRouteInitializeReply.gw_n_routes', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEINITIALIZEREPLY_BGPROUTEINITIALIZESTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1698,
  serialized_end=1994,
)


_BGPROUTECLEANUPREQUEST = _descriptor.Descriptor(
  name='BgpRouteCleanupRequest',
  full_name='routing.BgpRouteCleanupRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1996,
  serialized_end=2020,
)


_BGPROUTECLEANUPREPLY = _descriptor.Descriptor(
  name='BgpRouteCleanupReply',
  full_name='routing.BgpRouteCleanupReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteCleanupReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTECLEANUPREPLY_BGPROUTECLEANUPSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2023,
  serialized_end=2193,
)


_BGPROUTEUPDATEREQUEST = _descriptor.Descriptor(
  name='BgpRouteUpdateRequest',
  full_name='routing.BgpRouteUpdateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bgp_routes', full_name='routing.BgpRouteUpdateRequest.bgp_routes', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2195,
  serialized_end=2262,
)


_BGPROUTEREMOVEREQUEST = _descriptor.Descriptor(
  name='BgpRouteRemoveRequest',
  full_name='routing.BgpRouteRemoveRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='or_longer', full_name='routing.BgpRouteRemoveRequest.or_longer', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bgp_routes', full_name='routing.BgpRouteRemoveRequest.bgp_routes', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2264,
  serialized_end=2350,
)


_BGPROUTEGETREQUEST = _descriptor.Descriptor(
  name='BgpRouteGetRequest',
  full_name='routing.BgpRouteGetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bgp_route', full_name='routing.BgpRouteGetRequest.bgp_route', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='or_longer', full_name='routing.BgpRouteGetRequest.or_longer', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='active_only', full_name='routing.BgpRouteGetRequest.active_only', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reply_address_format', full_name='routing.BgpRouteGetRequest.reply_address_format', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reply_table_format', full_name='routing.BgpRouteGetRequest.reply_table_format', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_count', full_name='routing.BgpRouteGetRequest.route_count', index=5,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2353,
  serialized_end=2586,
)


_BGPROUTEOPERREPLY = _descriptor.Descriptor(
  name='BgpRouteOperReply',
  full_name='routing.BgpRouteOperReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteOperReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='operations_completed', full_name='routing.BgpRouteOperReply.operations_completed', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEOPERREPLY_BGPROUTEOPERSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2589,
  serialized_end=3462,
)


_BGPROUTEGETREPLY = _descriptor.Descriptor(
  name='BgpRouteGetReply',
  full_name='routing.BgpRouteGetReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteGetReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bgp_routes', full_name='routing.BgpRouteGetReply.bgp_routes', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEGETREPLY_BGPROUTEGETSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3465,
  serialized_end=3930,
)


_BGPROUTEMONITORREGISTERREQUEST = _descriptor.Descriptor(
  name='BgpRouteMonitorRegisterRequest',
  full_name='routing.BgpRouteMonitorRegisterRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reply_address_format', full_name='routing.BgpRouteMonitorRegisterRequest.reply_address_format', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reply_table_format', full_name='routing.BgpRouteMonitorRegisterRequest.reply_table_format', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='route_count', full_name='routing.BgpRouteMonitorRegisterRequest.route_count', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3933,
  serialized_end=4095,
)


_BGPROUTEMONITORREGISTERREPLY = _descriptor.Descriptor(
  name='BgpRouteMonitorRegisterReply',
  full_name='routing.BgpRouteMonitorRegisterReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteMonitorRegisterReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='monitor_entries', full_name='routing.BgpRouteMonitorRegisterReply.monitor_entries', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEMONITORREGISTERREPLY_BGPROUTEMONITORREGISTERSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4098,
  serialized_end=4488,
)


_BGPROUTEMONITORUNREGISTERREQUEST = _descriptor.Descriptor(
  name='BgpRouteMonitorUnregisterRequest',
  full_name='routing.BgpRouteMonitorUnregisterRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4490,
  serialized_end=4524,
)


_BGPROUTEMONITORUNREGISTERREPLY = _descriptor.Descriptor(
  name='BgpRouteMonitorUnregisterReply',
  full_name='routing.BgpRouteMonitorUnregisterReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteMonitorUnregisterReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEMONITORUNREGISTERREPLY_BGPROUTEMONITORUNREGISTERSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4527,
  serialized_end=4757,
)


_BGPROUTEMONITORREFRESHREQUEST = _descriptor.Descriptor(
  name='BgpRouteMonitorRefreshRequest',
  full_name='routing.BgpRouteMonitorRefreshRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4759,
  serialized_end=4790,
)


_BGPROUTEMONITORREFRESHREPLY = _descriptor.Descriptor(
  name='BgpRouteMonitorRefreshReply',
  full_name='routing.BgpRouteMonitorRefreshReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='routing.BgpRouteMonitorRefreshReply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _BGPROUTEMONITORREFRESHREPLY_BGPROUTEMONITORREFRESHSTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4793,
  serialized_end=5011,
)

_COMMUNITYLIST.fields_by_name['com_list'].message_type = _COMMUNITY
_BGPROUTEMATCH.fields_by_name['dest_prefix'].message_type = prpd__common__pb2._ROUTEPREFIX
_BGPROUTEMATCH.fields_by_name['table'].message_type = prpd__common__pb2._ROUTETABLE
_BGPROUTEMATCH.fields_by_name['protocol'].enum_type = _ROUTEPROTOCOL
_BGPROUTEMATCH.fields_by_name['communities'].message_type = _COMMUNITYLIST
_BGPROUTEENTRY.fields_by_name['dest_prefix'].message_type = prpd__common__pb2._ROUTEPREFIX
_BGPROUTEENTRY.fields_by_name['table'].message_type = prpd__common__pb2._ROUTETABLE
_BGPROUTEENTRY.fields_by_name['protocol'].enum_type = _ROUTEPROTOCOL
_BGPROUTEENTRY.fields_by_name['route_preference'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['local_preference'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['med'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['aigp_distance'].message_type = _BGPATTRIB64
_BGPROUTEENTRY.fields_by_name['labels'].message_type = prpd__common__pb2._LABELSTACK
_BGPROUTEENTRY.fields_by_name['communities'].message_type = _COMMUNITYLIST
_BGPROUTEENTRY.fields_by_name['aspath'].message_type = _ASPATH
_BGPROUTEENTRY.fields_by_name['originator_id'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['cluster_list'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['cluster_id'].message_type = _BGPATTRIB32
_BGPROUTEENTRY.fields_by_name['protocol_nexthops'].message_type = jnx__addr__pb2._IPADDRESS
_BGPROUTEENTRY.fields_by_name['route_type'].enum_type = _BGPPEERTYPE
_BGPROUTEENTRY.fields_by_name['route_flags'].message_type = _BGPROUTEOPERATIONFLAGS
_BGPROUTEENTRY.fields_by_name['route_data'].message_type = prpd__common__pb2._ADDRESSFAMILYSPECIFICDATA
_BGPROUTEENTRY.oneofs_by_name['LabelInfo'].fields.append(
  _BGPROUTEENTRY.fields_by_name['vpn_label'])
_BGPROUTEENTRY.fields_by_name['vpn_label'].containing_oneof = _BGPROUTEENTRY.oneofs_by_name['LabelInfo']
_BGPROUTEENTRY.oneofs_by_name['LabelInfo'].fields.append(
  _BGPROUTEENTRY.fields_by_name['labels'])
_BGPROUTEENTRY.fields_by_name['labels'].containing_oneof = _BGPROUTEENTRY.oneofs_by_name['LabelInfo']
_BGPROUTEMONITORENTRY.fields_by_name['operation'].enum_type = _BGPROUTEMONITORENTRY_BGPROUTEMONITOROPER
_BGPROUTEMONITORENTRY.fields_by_name['bgp_route'].message_type = _BGPROUTEENTRY
_BGPROUTEMONITORENTRY_BGPROUTEMONITOROPER.containing_type = _BGPROUTEMONITORENTRY
_BGPROUTEINITIALIZEREPLY.fields_by_name['status'].enum_type = _BGPROUTEINITIALIZEREPLY_BGPROUTEINITIALIZESTATUS
_BGPROUTEINITIALIZEREPLY_BGPROUTEINITIALIZESTATUS.containing_type = _BGPROUTEINITIALIZEREPLY
_BGPROUTECLEANUPREPLY.fields_by_name['status'].enum_type = _BGPROUTECLEANUPREPLY_BGPROUTECLEANUPSTATUS
_BGPROUTECLEANUPREPLY_BGPROUTECLEANUPSTATUS.containing_type = _BGPROUTECLEANUPREPLY
_BGPROUTEUPDATEREQUEST.fields_by_name['bgp_routes'].message_type = _BGPROUTEENTRY
_BGPROUTEREMOVEREQUEST.fields_by_name['bgp_routes'].message_type = _BGPROUTEMATCH
_BGPROUTEGETREQUEST.fields_by_name['bgp_route'].message_type = _BGPROUTEMATCH
_BGPROUTEGETREQUEST.fields_by_name['reply_address_format'].enum_type = jnx__addr__pb2._ADDRESSFORMAT
_BGPROUTEGETREQUEST.fields_by_name['reply_table_format'].enum_type = prpd__common__pb2._ROUTETABLEFORMAT
_BGPROUTEOPERREPLY.fields_by_name['status'].enum_type = _BGPROUTEOPERREPLY_BGPROUTEOPERSTATUS
_BGPROUTEOPERREPLY_BGPROUTEOPERSTATUS.containing_type = _BGPROUTEOPERREPLY
_BGPROUTEGETREPLY.fields_by_name['status'].enum_type = _BGPROUTEGETREPLY_BGPROUTEGETSTATUS
_BGPROUTEGETREPLY.fields_by_name['bgp_routes'].message_type = _BGPROUTEENTRY
_BGPROUTEGETREPLY_BGPROUTEGETSTATUS.containing_type = _BGPROUTEGETREPLY
_BGPROUTEMONITORREGISTERREQUEST.fields_by_name['reply_address_format'].enum_type = jnx__addr__pb2._ADDRESSFORMAT
_BGPROUTEMONITORREGISTERREQUEST.fields_by_name['reply_table_format'].enum_type = prpd__common__pb2._ROUTETABLEFORMAT
_BGPROUTEMONITORREGISTERREPLY.fields_by_name['status'].enum_type = _BGPROUTEMONITORREGISTERREPLY_BGPROUTEMONITORREGISTERSTATUS
_BGPROUTEMONITORREGISTERREPLY.fields_by_name['monitor_entries'].message_type = _BGPROUTEMONITORENTRY
_BGPROUTEMONITORREGISTERREPLY_BGPROUTEMONITORREGISTERSTATUS.containing_type = _BGPROUTEMONITORREGISTERREPLY
_BGPROUTEMONITORUNREGISTERREPLY.fields_by_name['status'].enum_type = _BGPROUTEMONITORUNREGISTERREPLY_BGPROUTEMONITORUNREGISTERSTATUS
_BGPROUTEMONITORUNREGISTERREPLY_BGPROUTEMONITORUNREGISTERSTATUS.containing_type = _BGPROUTEMONITORUNREGISTERREPLY
_BGPROUTEMONITORREFRESHREPLY.fields_by_name['status'].enum_type = _BGPROUTEMONITORREFRESHREPLY_BGPROUTEMONITORREFRESHSTATUS
_BGPROUTEMONITORREFRESHREPLY_BGPROUTEMONITORREFRESHSTATUS.containing_type = _BGPROUTEMONITORREFRESHREPLY
DESCRIPTOR.message_types_by_name['BgpRouteOperationFlags'] = _BGPROUTEOPERATIONFLAGS
DESCRIPTOR.message_types_by_name['BgpAttrib32'] = _BGPATTRIB32
DESCRIPTOR.message_types_by_name['BgpAttrib64'] = _BGPATTRIB64
DESCRIPTOR.message_types_by_name['Community'] = _COMMUNITY
DESCRIPTOR.message_types_by_name['CommunityList'] = _COMMUNITYLIST
DESCRIPTOR.message_types_by_name['AsPath'] = _ASPATH
DESCRIPTOR.message_types_by_name['BgpRouteMatch'] = _BGPROUTEMATCH
DESCRIPTOR.message_types_by_name['BgpRouteEntry'] = _BGPROUTEENTRY
DESCRIPTOR.message_types_by_name['BgpRouteMonitorEntry'] = _BGPROUTEMONITORENTRY
DESCRIPTOR.message_types_by_name['BgpRouteInitializeRequest'] = _BGPROUTEINITIALIZEREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteInitializeReply'] = _BGPROUTEINITIALIZEREPLY
DESCRIPTOR.message_types_by_name['BgpRouteCleanupRequest'] = _BGPROUTECLEANUPREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteCleanupReply'] = _BGPROUTECLEANUPREPLY
DESCRIPTOR.message_types_by_name['BgpRouteUpdateRequest'] = _BGPROUTEUPDATEREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteRemoveRequest'] = _BGPROUTEREMOVEREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteGetRequest'] = _BGPROUTEGETREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteOperReply'] = _BGPROUTEOPERREPLY
DESCRIPTOR.message_types_by_name['BgpRouteGetReply'] = _BGPROUTEGETREPLY
DESCRIPTOR.message_types_by_name['BgpRouteMonitorRegisterRequest'] = _BGPROUTEMONITORREGISTERREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteMonitorRegisterReply'] = _BGPROUTEMONITORREGISTERREPLY
DESCRIPTOR.message_types_by_name['BgpRouteMonitorUnregisterRequest'] = _BGPROUTEMONITORUNREGISTERREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteMonitorUnregisterReply'] = _BGPROUTEMONITORUNREGISTERREPLY
DESCRIPTOR.message_types_by_name['BgpRouteMonitorRefreshRequest'] = _BGPROUTEMONITORREFRESHREQUEST
DESCRIPTOR.message_types_by_name['BgpRouteMonitorRefreshReply'] = _BGPROUTEMONITORREFRESHREPLY
DESCRIPTOR.enum_types_by_name['RouteProtocol'] = _ROUTEPROTOCOL
DESCRIPTOR.enum_types_by_name['RouteOperation'] = _ROUTEOPERATION
DESCRIPTOR.enum_types_by_name['BgpPeerType'] = _BGPPEERTYPE

BgpRouteOperationFlags = _reflection.GeneratedProtocolMessageType('BgpRouteOperationFlags', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEOPERATIONFLAGS,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteOperationFlags)
  ))
_sym_db.RegisterMessage(BgpRouteOperationFlags)

BgpAttrib32 = _reflection.GeneratedProtocolMessageType('BgpAttrib32', (_message.Message,), dict(
  DESCRIPTOR = _BGPATTRIB32,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpAttrib32)
  ))
_sym_db.RegisterMessage(BgpAttrib32)

BgpAttrib64 = _reflection.GeneratedProtocolMessageType('BgpAttrib64', (_message.Message,), dict(
  DESCRIPTOR = _BGPATTRIB64,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpAttrib64)
  ))
_sym_db.RegisterMessage(BgpAttrib64)

Community = _reflection.GeneratedProtocolMessageType('Community', (_message.Message,), dict(
  DESCRIPTOR = _COMMUNITY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.Community)
  ))
_sym_db.RegisterMessage(Community)

CommunityList = _reflection.GeneratedProtocolMessageType('CommunityList', (_message.Message,), dict(
  DESCRIPTOR = _COMMUNITYLIST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.CommunityList)
  ))
_sym_db.RegisterMessage(CommunityList)

AsPath = _reflection.GeneratedProtocolMessageType('AsPath', (_message.Message,), dict(
  DESCRIPTOR = _ASPATH,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.AsPath)
  ))
_sym_db.RegisterMessage(AsPath)

BgpRouteMatch = _reflection.GeneratedProtocolMessageType('BgpRouteMatch', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMATCH,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMatch)
  ))
_sym_db.RegisterMessage(BgpRouteMatch)

BgpRouteEntry = _reflection.GeneratedProtocolMessageType('BgpRouteEntry', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEENTRY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteEntry)
  ))
_sym_db.RegisterMessage(BgpRouteEntry)

BgpRouteMonitorEntry = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorEntry', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORENTRY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorEntry)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorEntry)

BgpRouteInitializeRequest = _reflection.GeneratedProtocolMessageType('BgpRouteInitializeRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEINITIALIZEREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteInitializeRequest)
  ))
_sym_db.RegisterMessage(BgpRouteInitializeRequest)

BgpRouteInitializeReply = _reflection.GeneratedProtocolMessageType('BgpRouteInitializeReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEINITIALIZEREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteInitializeReply)
  ))
_sym_db.RegisterMessage(BgpRouteInitializeReply)

BgpRouteCleanupRequest = _reflection.GeneratedProtocolMessageType('BgpRouteCleanupRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTECLEANUPREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteCleanupRequest)
  ))
_sym_db.RegisterMessage(BgpRouteCleanupRequest)

BgpRouteCleanupReply = _reflection.GeneratedProtocolMessageType('BgpRouteCleanupReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTECLEANUPREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteCleanupReply)
  ))
_sym_db.RegisterMessage(BgpRouteCleanupReply)

BgpRouteUpdateRequest = _reflection.GeneratedProtocolMessageType('BgpRouteUpdateRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEUPDATEREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteUpdateRequest)
  ))
_sym_db.RegisterMessage(BgpRouteUpdateRequest)

BgpRouteRemoveRequest = _reflection.GeneratedProtocolMessageType('BgpRouteRemoveRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEREMOVEREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteRemoveRequest)
  ))
_sym_db.RegisterMessage(BgpRouteRemoveRequest)

BgpRouteGetRequest = _reflection.GeneratedProtocolMessageType('BgpRouteGetRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEGETREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteGetRequest)
  ))
_sym_db.RegisterMessage(BgpRouteGetRequest)

BgpRouteOperReply = _reflection.GeneratedProtocolMessageType('BgpRouteOperReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEOPERREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteOperReply)
  ))
_sym_db.RegisterMessage(BgpRouteOperReply)

BgpRouteGetReply = _reflection.GeneratedProtocolMessageType('BgpRouteGetReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEGETREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteGetReply)
  ))
_sym_db.RegisterMessage(BgpRouteGetReply)

BgpRouteMonitorRegisterRequest = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorRegisterRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORREGISTERREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorRegisterRequest)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorRegisterRequest)

BgpRouteMonitorRegisterReply = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorRegisterReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORREGISTERREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorRegisterReply)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorRegisterReply)

BgpRouteMonitorUnregisterRequest = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorUnregisterRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORUNREGISTERREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorUnregisterRequest)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorUnregisterRequest)

BgpRouteMonitorUnregisterReply = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorUnregisterReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORUNREGISTERREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorUnregisterReply)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorUnregisterReply)

BgpRouteMonitorRefreshRequest = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorRefreshRequest', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORREFRESHREQUEST,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorRefreshRequest)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorRefreshRequest)

BgpRouteMonitorRefreshReply = _reflection.GeneratedProtocolMessageType('BgpRouteMonitorRefreshReply', (_message.Message,), dict(
  DESCRIPTOR = _BGPROUTEMONITORREFRESHREPLY,
  __module__ = 'bgp_route_service_pb2'
  # @@protoc_insertion_point(class_scope:routing.BgpRouteMonitorRefreshReply)
  ))
_sym_db.RegisterMessage(BgpRouteMonitorRefreshReply)


_ROUTEOPERATION.values_by_name["UNSPECIFIED"].has_options = True
_ROUTEOPERATION.values_by_name["UNSPECIFIED"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001'))
_ROUTEOPERATION.values_by_name["NO_ADVERTISE"].has_options = True
_ROUTEOPERATION.values_by_name["NO_ADVERTISE"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001'))
_ROUTEOPERATION.values_by_name["NO_EXPORT"].has_options = True
_ROUTEOPERATION.values_by_name["NO_EXPORT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001'))
_ROUTEOPERATION.values_by_name["USE_NH_REJECT"].has_options = True
_ROUTEOPERATION.values_by_name["USE_NH_REJECT"]._options = _descriptor._ParseOptions(descriptor_pb2.EnumValueOptions(), _b('\010\001'))
_BGPROUTEENTRY.fields_by_name['route_oper_flag'].has_options = True
_BGPROUTEENTRY.fields_by_name['route_oper_flag']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class BgpRouteStub(object):
    """*
    BGP route operations service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.BgpRouteInitialize = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteInitialize',
          request_serializer=BgpRouteInitializeRequest.SerializeToString,
          response_deserializer=BgpRouteInitializeReply.FromString,
          )
      self.BgpRouteCleanup = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteCleanup',
          request_serializer=BgpRouteCleanupRequest.SerializeToString,
          response_deserializer=BgpRouteCleanupReply.FromString,
          )
      self.BgpRouteAdd = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteAdd',
          request_serializer=BgpRouteUpdateRequest.SerializeToString,
          response_deserializer=BgpRouteOperReply.FromString,
          )
      self.BgpRouteModify = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteModify',
          request_serializer=BgpRouteUpdateRequest.SerializeToString,
          response_deserializer=BgpRouteOperReply.FromString,
          )
      self.BgpRouteUpdate = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteUpdate',
          request_serializer=BgpRouteUpdateRequest.SerializeToString,
          response_deserializer=BgpRouteOperReply.FromString,
          )
      self.BgpRouteRemove = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteRemove',
          request_serializer=BgpRouteRemoveRequest.SerializeToString,
          response_deserializer=BgpRouteOperReply.FromString,
          )
      self.BgpRouteGet = channel.unary_stream(
          '/routing.BgpRoute/BgpRouteGet',
          request_serializer=BgpRouteGetRequest.SerializeToString,
          response_deserializer=BgpRouteGetReply.FromString,
          )
      self.BgpRouteMonitorRegister = channel.unary_stream(
          '/routing.BgpRoute/BgpRouteMonitorRegister',
          request_serializer=BgpRouteMonitorRegisterRequest.SerializeToString,
          response_deserializer=BgpRouteMonitorRegisterReply.FromString,
          )
      self.BgpRouteMonitorUnregister = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteMonitorUnregister',
          request_serializer=BgpRouteMonitorUnregisterRequest.SerializeToString,
          response_deserializer=BgpRouteMonitorUnregisterReply.FromString,
          )
      self.BgpRouteMonitorRefresh = channel.unary_unary(
          '/routing.BgpRoute/BgpRouteMonitorRefresh',
          request_serializer=BgpRouteMonitorRefreshRequest.SerializeToString,
          response_deserializer=BgpRouteMonitorRefreshReply.FromString,
          )


  class BgpRouteServicer(object):
    """*
    BGP route operations service
    """

    def BgpRouteInitialize(self, request, context):
      """* BGP Routing Initialize operation
      BgpRouteInitialize() must be called upon connection or reconnection
      to the server. If the client is connecting for the first time, the
      server will initialize per-client state for the connection.
      If the client is reconnecting with the same client name following a 
      connection fault (having not closed a previous connection with
      BgpRouteCleanup), then gateway and route state will be rebound to 
      the new connection.
      In this case, the return status will indicate that state was rebound
      and the client need not reply the previous routing state to the 
      server. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteCleanup(self, request, context):
      """* BGP Routing Cleanup operation
      BgpRouteCleanup will purge all gateway and route state for the
      client. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteAdd(self, request, context):
      """* BGP Route Add operation
      Add a BGP-Static route to the routing table.
      bgp_route_add may be called multiple times for the same prefix to add 
      multiple paths with distinct path_cookie for the same destination. 
      If a matching route already exists in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully created 
      prior to any error or full completion of the request. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteModify(self, request, context):
      """* BGP Route Modify operation
      Modify an existing BGP-Static route in the routing table. For each
      route in the request, if the route_key is matched, the matched route
      will be updated with the supplied route attributes.
      If a matching route does not exist in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteUpdate(self, request, context):
      """* BGP Route Update operation
      Create a new BGP-Static route if a matching route does not exist, OR
      modify an existing BGP-Static route if it is already present in the
      routing table. 
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteRemove(self, request, context):
      """* BGP Route Remove operation
      Remove a BGP-Static route from the routing table.
      BgpRouteRemove may be called multiple times for the same prefix 
      to remove multiple paths with distinct path_cookie for the same 
      destination. 
      The request may contain from one to 1000 routes
      to be removed.
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteGet(self, request, context):
      """* BGP Route Get operation
      Lookup a BGP or BGP-Static protocol route from the routing table.
      All match parameters are optional.
      Match fields that are not specified or that
      may match more than one route (e.g. a less-specific destination 
      prefix) may result in multiple routes being returned in the replies.
      Only BGP and BGP-Static routes will be matched.
      Replies are streamed until all match routes have been sent. The
      client will receive a final null message once all routes have 
      been received.
      The server's walk of search results is not atomic so route changes
      during streaming and consumption of replies may or may not be 
      reflected in the results.
      See BgpRouteGetReply. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteMonitorRegister(self, request, context):
      """* 
      BGP Route Monitoring Registration
      Register to receive updates streamed from BGP when routes matching
      the bgp-import "analyze" policy action are added, modified, or 
      withdrawn by BGP peers.
      Updates will be streamed as BgpRouteMonitorRegisterReply mesages
      BgpRouteMonitorUnregister() is called.
      Upon initial registration, a full download of route ADD operations for 
      all routes matching the "analyze" import policy action will be 
      streamed, followed by a closing END_OF_RIB operation. Subsequently,
      incremental updates will be streamed whenever BGP advertisements 
      from peers are added, modified, or withdrawn, or when BGP import 
      "analyze" policy is changed.
      There is no strict ordering of routes in the update stream and
      state compression is applied when applicable to a set of operations. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteMonitorUnregister(self, request, context):
      """* 
      BGP Route Monitoring Unregistration
      Generated client API: BgpRouteMonitorUnregister()
      Unregister to receive updates streamed from BGP when routes are
      added, modified, or withdrawn by BGP peers. 
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BgpRouteMonitorRefresh(self, request, context):
      """* 
      BGP Route Monitoring Refresh
      Generated client API: BgpRouteMonitorRefresh()
      Request to refresh all route monitoring entries to the client.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BgpRouteServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'BgpRouteInitialize': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteInitialize,
            request_deserializer=BgpRouteInitializeRequest.FromString,
            response_serializer=BgpRouteInitializeReply.SerializeToString,
        ),
        'BgpRouteCleanup': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteCleanup,
            request_deserializer=BgpRouteCleanupRequest.FromString,
            response_serializer=BgpRouteCleanupReply.SerializeToString,
        ),
        'BgpRouteAdd': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteAdd,
            request_deserializer=BgpRouteUpdateRequest.FromString,
            response_serializer=BgpRouteOperReply.SerializeToString,
        ),
        'BgpRouteModify': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteModify,
            request_deserializer=BgpRouteUpdateRequest.FromString,
            response_serializer=BgpRouteOperReply.SerializeToString,
        ),
        'BgpRouteUpdate': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteUpdate,
            request_deserializer=BgpRouteUpdateRequest.FromString,
            response_serializer=BgpRouteOperReply.SerializeToString,
        ),
        'BgpRouteRemove': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteRemove,
            request_deserializer=BgpRouteRemoveRequest.FromString,
            response_serializer=BgpRouteOperReply.SerializeToString,
        ),
        'BgpRouteGet': grpc.unary_stream_rpc_method_handler(
            servicer.BgpRouteGet,
            request_deserializer=BgpRouteGetRequest.FromString,
            response_serializer=BgpRouteGetReply.SerializeToString,
        ),
        'BgpRouteMonitorRegister': grpc.unary_stream_rpc_method_handler(
            servicer.BgpRouteMonitorRegister,
            request_deserializer=BgpRouteMonitorRegisterRequest.FromString,
            response_serializer=BgpRouteMonitorRegisterReply.SerializeToString,
        ),
        'BgpRouteMonitorUnregister': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteMonitorUnregister,
            request_deserializer=BgpRouteMonitorUnregisterRequest.FromString,
            response_serializer=BgpRouteMonitorUnregisterReply.SerializeToString,
        ),
        'BgpRouteMonitorRefresh': grpc.unary_unary_rpc_method_handler(
            servicer.BgpRouteMonitorRefresh,
            request_deserializer=BgpRouteMonitorRefreshRequest.FromString,
            response_serializer=BgpRouteMonitorRefreshReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'routing.BgpRoute', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBgpRouteServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    BGP route operations service
    """
    def BgpRouteInitialize(self, request, context):
      """* BGP Routing Initialize operation
      BgpRouteInitialize() must be called upon connection or reconnection
      to the server. If the client is connecting for the first time, the
      server will initialize per-client state for the connection.
      If the client is reconnecting with the same client name following a 
      connection fault (having not closed a previous connection with
      BgpRouteCleanup), then gateway and route state will be rebound to 
      the new connection.
      In this case, the return status will indicate that state was rebound
      and the client need not reply the previous routing state to the 
      server. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteCleanup(self, request, context):
      """* BGP Routing Cleanup operation
      BgpRouteCleanup will purge all gateway and route state for the
      client. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteAdd(self, request, context):
      """* BGP Route Add operation
      Add a BGP-Static route to the routing table.
      bgp_route_add may be called multiple times for the same prefix to add 
      multiple paths with distinct path_cookie for the same destination. 
      If a matching route already exists in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully created 
      prior to any error or full completion of the request. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteModify(self, request, context):
      """* BGP Route Modify operation
      Modify an existing BGP-Static route in the routing table. For each
      route in the request, if the route_key is matched, the matched route
      will be updated with the supplied route attributes.
      If a matching route does not exist in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteUpdate(self, request, context):
      """* BGP Route Update operation
      Create a new BGP-Static route if a matching route does not exist, OR
      modify an existing BGP-Static route if it is already present in the
      routing table. 
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteRemove(self, request, context):
      """* BGP Route Remove operation
      Remove a BGP-Static route from the routing table.
      BgpRouteRemove may be called multiple times for the same prefix 
      to remove multiple paths with distinct path_cookie for the same 
      destination. 
      The request may contain from one to 1000 routes
      to be removed.
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteGet(self, request, context):
      """* BGP Route Get operation
      Lookup a BGP or BGP-Static protocol route from the routing table.
      All match parameters are optional.
      Match fields that are not specified or that
      may match more than one route (e.g. a less-specific destination 
      prefix) may result in multiple routes being returned in the replies.
      Only BGP and BGP-Static routes will be matched.
      Replies are streamed until all match routes have been sent. The
      client will receive a final null message once all routes have 
      been received.
      The server's walk of search results is not atomic so route changes
      during streaming and consumption of replies may or may not be 
      reflected in the results.
      See BgpRouteGetReply. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteMonitorRegister(self, request, context):
      """* 
      BGP Route Monitoring Registration
      Register to receive updates streamed from BGP when routes matching
      the bgp-import "analyze" policy action are added, modified, or 
      withdrawn by BGP peers.
      Updates will be streamed as BgpRouteMonitorRegisterReply mesages
      BgpRouteMonitorUnregister() is called.
      Upon initial registration, a full download of route ADD operations for 
      all routes matching the "analyze" import policy action will be 
      streamed, followed by a closing END_OF_RIB operation. Subsequently,
      incremental updates will be streamed whenever BGP advertisements 
      from peers are added, modified, or withdrawn, or when BGP import 
      "analyze" policy is changed.
      There is no strict ordering of routes in the update stream and
      state compression is applied when applicable to a set of operations. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteMonitorUnregister(self, request, context):
      """* 
      BGP Route Monitoring Unregistration
      Generated client API: BgpRouteMonitorUnregister()
      Unregister to receive updates streamed from BGP when routes are
      added, modified, or withdrawn by BGP peers. 
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BgpRouteMonitorRefresh(self, request, context):
      """* 
      BGP Route Monitoring Refresh
      Generated client API: BgpRouteMonitorRefresh()
      Request to refresh all route monitoring entries to the client.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBgpRouteStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    BGP route operations service
    """
    def BgpRouteInitialize(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Routing Initialize operation
      BgpRouteInitialize() must be called upon connection or reconnection
      to the server. If the client is connecting for the first time, the
      server will initialize per-client state for the connection.
      If the client is reconnecting with the same client name following a 
      connection fault (having not closed a previous connection with
      BgpRouteCleanup), then gateway and route state will be rebound to 
      the new connection.
      In this case, the return status will indicate that state was rebound
      and the client need not reply the previous routing state to the 
      server. 
      """
      raise NotImplementedError()
    BgpRouteInitialize.future = None
    def BgpRouteCleanup(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Routing Cleanup operation
      BgpRouteCleanup will purge all gateway and route state for the
      client. 
      """
      raise NotImplementedError()
    BgpRouteCleanup.future = None
    def BgpRouteAdd(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Route Add operation
      Add a BGP-Static route to the routing table.
      bgp_route_add may be called multiple times for the same prefix to add 
      multiple paths with distinct path_cookie for the same destination. 
      If a matching route already exists in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully created 
      prior to any error or full completion of the request. 
      """
      raise NotImplementedError()
    BgpRouteAdd.future = None
    def BgpRouteModify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Route Modify operation
      Modify an existing BGP-Static route in the routing table. For each
      route in the request, if the route_key is matched, the matched route
      will be updated with the supplied route attributes.
      If a matching route does not exist in the given table, then an error
      will be returned.
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      raise NotImplementedError()
    BgpRouteModify.future = None
    def BgpRouteUpdate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Route Update operation
      Create a new BGP-Static route if a matching route does not exist, OR
      modify an existing BGP-Static route if it is already present in the
      routing table. 
      BgpRouteUpdateRequest may contain from one to 1000 routes
      to be added. 
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      raise NotImplementedError()
    BgpRouteUpdate.future = None
    def BgpRouteRemove(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Route Remove operation
      Remove a BGP-Static route from the routing table.
      BgpRouteRemove may be called multiple times for the same prefix 
      to remove multiple paths with distinct path_cookie for the same 
      destination. 
      The request may contain from one to 1000 routes
      to be removed.
      If the request contains multiple routes, the routes will
      be processed in the order given and the first error encountered will
      cause the request to abort.
      The API always returns the final status (success or first error
      encountered) and the number of routes that were successfully modified
      prior to any error or full completion of the request. 
      """
      raise NotImplementedError()
    BgpRouteRemove.future = None
    def BgpRouteGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* BGP Route Get operation
      Lookup a BGP or BGP-Static protocol route from the routing table.
      All match parameters are optional.
      Match fields that are not specified or that
      may match more than one route (e.g. a less-specific destination 
      prefix) may result in multiple routes being returned in the replies.
      Only BGP and BGP-Static routes will be matched.
      Replies are streamed until all match routes have been sent. The
      client will receive a final null message once all routes have 
      been received.
      The server's walk of search results is not atomic so route changes
      during streaming and consumption of replies may or may not be 
      reflected in the results.
      See BgpRouteGetReply. 
      """
      raise NotImplementedError()
    def BgpRouteMonitorRegister(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* 
      BGP Route Monitoring Registration
      Register to receive updates streamed from BGP when routes matching
      the bgp-import "analyze" policy action are added, modified, or 
      withdrawn by BGP peers.
      Updates will be streamed as BgpRouteMonitorRegisterReply mesages
      BgpRouteMonitorUnregister() is called.
      Upon initial registration, a full download of route ADD operations for 
      all routes matching the "analyze" import policy action will be 
      streamed, followed by a closing END_OF_RIB operation. Subsequently,
      incremental updates will be streamed whenever BGP advertisements 
      from peers are added, modified, or withdrawn, or when BGP import 
      "analyze" policy is changed.
      There is no strict ordering of routes in the update stream and
      state compression is applied when applicable to a set of operations. 
      """
      raise NotImplementedError()
    def BgpRouteMonitorUnregister(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* 
      BGP Route Monitoring Unregistration
      Generated client API: BgpRouteMonitorUnregister()
      Unregister to receive updates streamed from BGP when routes are
      added, modified, or withdrawn by BGP peers. 
      """
      raise NotImplementedError()
    BgpRouteMonitorUnregister.future = None
    def BgpRouteMonitorRefresh(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* 
      BGP Route Monitoring Refresh
      Generated client API: BgpRouteMonitorRefresh()
      Request to refresh all route monitoring entries to the client.
      """
      raise NotImplementedError()
    BgpRouteMonitorRefresh.future = None


  def beta_create_BgpRoute_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('routing.BgpRoute', 'BgpRouteAdd'): BgpRouteUpdateRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteCleanup'): BgpRouteCleanupRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteGet'): BgpRouteGetRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteInitialize'): BgpRouteInitializeRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteModify'): BgpRouteUpdateRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorRefresh'): BgpRouteMonitorRefreshRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorRegister'): BgpRouteMonitorRegisterRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorUnregister'): BgpRouteMonitorUnregisterRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteRemove'): BgpRouteRemoveRequest.FromString,
      ('routing.BgpRoute', 'BgpRouteUpdate'): BgpRouteUpdateRequest.FromString,
    }
    response_serializers = {
      ('routing.BgpRoute', 'BgpRouteAdd'): BgpRouteOperReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteCleanup'): BgpRouteCleanupReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteGet'): BgpRouteGetReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteInitialize'): BgpRouteInitializeReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteModify'): BgpRouteOperReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorRefresh'): BgpRouteMonitorRefreshReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorRegister'): BgpRouteMonitorRegisterReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorUnregister'): BgpRouteMonitorUnregisterReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteRemove'): BgpRouteOperReply.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteUpdate'): BgpRouteOperReply.SerializeToString,
    }
    method_implementations = {
      ('routing.BgpRoute', 'BgpRouteAdd'): face_utilities.unary_unary_inline(servicer.BgpRouteAdd),
      ('routing.BgpRoute', 'BgpRouteCleanup'): face_utilities.unary_unary_inline(servicer.BgpRouteCleanup),
      ('routing.BgpRoute', 'BgpRouteGet'): face_utilities.unary_stream_inline(servicer.BgpRouteGet),
      ('routing.BgpRoute', 'BgpRouteInitialize'): face_utilities.unary_unary_inline(servicer.BgpRouteInitialize),
      ('routing.BgpRoute', 'BgpRouteModify'): face_utilities.unary_unary_inline(servicer.BgpRouteModify),
      ('routing.BgpRoute', 'BgpRouteMonitorRefresh'): face_utilities.unary_unary_inline(servicer.BgpRouteMonitorRefresh),
      ('routing.BgpRoute', 'BgpRouteMonitorRegister'): face_utilities.unary_stream_inline(servicer.BgpRouteMonitorRegister),
      ('routing.BgpRoute', 'BgpRouteMonitorUnregister'): face_utilities.unary_unary_inline(servicer.BgpRouteMonitorUnregister),
      ('routing.BgpRoute', 'BgpRouteRemove'): face_utilities.unary_unary_inline(servicer.BgpRouteRemove),
      ('routing.BgpRoute', 'BgpRouteUpdate'): face_utilities.unary_unary_inline(servicer.BgpRouteUpdate),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BgpRoute_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('routing.BgpRoute', 'BgpRouteAdd'): BgpRouteUpdateRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteCleanup'): BgpRouteCleanupRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteGet'): BgpRouteGetRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteInitialize'): BgpRouteInitializeRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteModify'): BgpRouteUpdateRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorRefresh'): BgpRouteMonitorRefreshRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorRegister'): BgpRouteMonitorRegisterRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteMonitorUnregister'): BgpRouteMonitorUnregisterRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteRemove'): BgpRouteRemoveRequest.SerializeToString,
      ('routing.BgpRoute', 'BgpRouteUpdate'): BgpRouteUpdateRequest.SerializeToString,
    }
    response_deserializers = {
      ('routing.BgpRoute', 'BgpRouteAdd'): BgpRouteOperReply.FromString,
      ('routing.BgpRoute', 'BgpRouteCleanup'): BgpRouteCleanupReply.FromString,
      ('routing.BgpRoute', 'BgpRouteGet'): BgpRouteGetReply.FromString,
      ('routing.BgpRoute', 'BgpRouteInitialize'): BgpRouteInitializeReply.FromString,
      ('routing.BgpRoute', 'BgpRouteModify'): BgpRouteOperReply.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorRefresh'): BgpRouteMonitorRefreshReply.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorRegister'): BgpRouteMonitorRegisterReply.FromString,
      ('routing.BgpRoute', 'BgpRouteMonitorUnregister'): BgpRouteMonitorUnregisterReply.FromString,
      ('routing.BgpRoute', 'BgpRouteRemove'): BgpRouteOperReply.FromString,
      ('routing.BgpRoute', 'BgpRouteUpdate'): BgpRouteOperReply.FromString,
    }
    cardinalities = {
      'BgpRouteAdd': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteCleanup': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteGet': cardinality.Cardinality.UNARY_STREAM,
      'BgpRouteInitialize': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteModify': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteMonitorRefresh': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteMonitorRegister': cardinality.Cardinality.UNARY_STREAM,
      'BgpRouteMonitorUnregister': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteRemove': cardinality.Cardinality.UNARY_UNARY,
      'BgpRouteUpdate': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'routing.BgpRoute', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
