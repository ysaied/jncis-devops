# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: agent.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='agent.proto',
  package='telemetry',
  syntax='proto3',
  serialized_pb=_b('\n\x0b\x61gent.proto\x12\ttelemetry\"*\n\tCollector\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\r\"A\n\x11SubscriptionInput\x12,\n\x0e\x63ollector_list\x18\x01 \x03(\x0b\x32\x14.telemetry.Collector\"\x89\x01\n\x04Path\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x0e\n\x06\x66ilter\x18\x02 \x01(\t\x12\x1a\n\x12suppress_unchanged\x18\x03 \x01(\x08\x12\x1b\n\x13max_silent_interval\x18\x04 \x01(\r\x12\x18\n\x10sample_frequency\x18\x05 \x01(\r\x12\x10\n\x08need_eom\x18\x06 \x01(\x08\"c\n\x1cSubscriptionAdditionalConfig\x12\x15\n\rlimit_records\x18\x01 \x01(\x05\x12\x1a\n\x12limit_time_seconds\x18\x02 \x01(\x05\x12\x10\n\x08need_eos\x18\x03 \x01(\x08\"\xaa\x01\n\x13SubscriptionRequest\x12+\n\x05input\x18\x01 \x01(\x0b\x32\x1c.telemetry.SubscriptionInput\x12\"\n\tpath_list\x18\x02 \x03(\x0b\x32\x0f.telemetry.Path\x12\x42\n\x11\x61\x64\x64itional_config\x18\x03 \x01(\x0b\x32\'.telemetry.SubscriptionAdditionalConfig\"/\n\x14SubscriptionResponse\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"j\n\x11SubscriptionReply\x12\x31\n\x08response\x18\x01 \x01(\x0b\x32\x1f.telemetry.SubscriptionResponse\x12\"\n\tpath_list\x18\x02 \x03(\x0b\x32\x0f.telemetry.Path\"\xbb\x01\n\x08KeyValue\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x16\n\x0c\x64ouble_value\x18\x05 \x01(\x01H\x00\x12\x13\n\tint_value\x18\x06 \x01(\x03H\x00\x12\x14\n\nuint_value\x18\x07 \x01(\x04H\x00\x12\x14\n\nsint_value\x18\x08 \x01(\x12H\x00\x12\x14\n\nbool_value\x18\t \x01(\x08H\x00\x12\x13\n\tstr_value\x18\n \x01(\tH\x00\x12\x15\n\x0b\x62ytes_value\x18\x0b \x01(\x0cH\x00\x42\x07\n\x05value\"\x85\x02\n\x0eOpenConfigData\x12\x11\n\tsystem_id\x18\x01 \x01(\t\x12\x14\n\x0c\x63omponent_id\x18\x02 \x01(\r\x12\x18\n\x10sub_component_id\x18\x03 \x01(\r\x12\x0c\n\x04path\x18\x04 \x01(\t\x12\x17\n\x0fsequence_number\x18\x05 \x01(\x04\x12\x11\n\ttimestamp\x18\x06 \x01(\x04\x12\x1f\n\x02kv\x18\x07 \x03(\x0b\x32\x13.telemetry.KeyValue\x12!\n\x06\x64\x65lete\x18\x08 \x03(\x0b\x32\x11.telemetry.Delete\x12\x1b\n\x03\x65om\x18\t \x03(\x0b\x32\x0e.telemetry.Eom\x12\x15\n\rsync_response\x18\n \x01(\x08\"\x16\n\x06\x44\x65lete\x12\x0c\n\x04path\x18\x01 \x01(\t\"\x13\n\x03\x45om\x12\x0c\n\x04path\x18\x01 \x01(\t\"4\n\x19\x43\x61ncelSubscriptionRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"P\n\x17\x43\x61ncelSubscriptionReply\x12#\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x15.telemetry.ReturnCode\x12\x10\n\x08\x63ode_str\x18\x02 \x01(\t\"2\n\x17GetSubscriptionsRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"P\n\x15GetSubscriptionsReply\x12\x37\n\x11subscription_list\x18\x01 \x03(\x0b\x32\x1c.telemetry.SubscriptionReply\"c\n\x1aGetOperationalStateRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\x12,\n\tverbosity\x18\x02 \x01(\x0e\x32\x19.telemetry.VerbosityLevel\";\n\x18GetOperationalStateReply\x12\x1f\n\x02kv\x18\x01 \x03(\x0b\x32\x13.telemetry.KeyValue\"\x15\n\x13\x44\x61taEncodingRequest\"C\n\x11\x44\x61taEncodingReply\x12.\n\rencoding_list\x18\x01 \x03(\x0e\x32\x17.telemetry.EncodingType*G\n\nReturnCode\x12\x0b\n\x07SUCCESS\x10\x00\x12\x19\n\x15NO_SUBSCRIPTION_ENTRY\x10\x01\x12\x11\n\rUNKNOWN_ERROR\x10\x02*2\n\x0eVerbosityLevel\x12\n\n\x06\x44\x45TAIL\x10\x00\x12\t\n\x05TERSE\x10\x01\x12\t\n\x05\x42RIEF\x10\x02*A\n\x0c\x45ncodingType\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03XML\x10\x01\x12\r\n\tJSON_IETF\x10\x02\x12\n\n\x06PROTO3\x10\x03\x32\xfc\x03\n\x13OpenConfigTelemetry\x12S\n\x12telemetrySubscribe\x12\x1e.telemetry.SubscriptionRequest\x1a\x19.telemetry.OpenConfigData\"\x00\x30\x01\x12i\n\x1b\x63\x61ncelTelemetrySubscription\x12$.telemetry.CancelSubscriptionRequest\x1a\".telemetry.CancelSubscriptionReply\"\x00\x12\x63\n\x19getTelemetrySubscriptions\x12\".telemetry.GetSubscriptionsRequest\x1a .telemetry.GetSubscriptionsReply\"\x00\x12l\n\x1cgetTelemetryOperationalState\x12%.telemetry.GetOperationalStateRequest\x1a#.telemetry.GetOperationalStateReply\"\x00\x12R\n\x10getDataEncodings\x12\x1e.telemetry.DataEncodingRequest\x1a\x1c.telemetry.DataEncodingReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_RETURNCODE = _descriptor.EnumDescriptor(
  name='ReturnCode',
  full_name='telemetry.ReturnCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NO_SUBSCRIPTION_ENTRY', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_ERROR', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1731,
  serialized_end=1802,
)
_sym_db.RegisterEnumDescriptor(_RETURNCODE)

ReturnCode = enum_type_wrapper.EnumTypeWrapper(_RETURNCODE)
_VERBOSITYLEVEL = _descriptor.EnumDescriptor(
  name='VerbosityLevel',
  full_name='telemetry.VerbosityLevel',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DETAIL', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TERSE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BRIEF', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1804,
  serialized_end=1854,
)
_sym_db.RegisterEnumDescriptor(_VERBOSITYLEVEL)

VerbosityLevel = enum_type_wrapper.EnumTypeWrapper(_VERBOSITYLEVEL)
_ENCODINGTYPE = _descriptor.EnumDescriptor(
  name='EncodingType',
  full_name='telemetry.EncodingType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNDEFINED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='XML', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='JSON_IETF', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PROTO3', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1856,
  serialized_end=1921,
)
_sym_db.RegisterEnumDescriptor(_ENCODINGTYPE)

EncodingType = enum_type_wrapper.EnumTypeWrapper(_ENCODINGTYPE)
SUCCESS = 0
NO_SUBSCRIPTION_ENTRY = 1
UNKNOWN_ERROR = 2
DETAIL = 0
TERSE = 1
BRIEF = 2
UNDEFINED = 0
XML = 1
JSON_IETF = 2
PROTO3 = 3



_COLLECTOR = _descriptor.Descriptor(
  name='Collector',
  full_name='telemetry.Collector',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='address', full_name='telemetry.Collector.address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='telemetry.Collector.port', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=68,
)


_SUBSCRIPTIONINPUT = _descriptor.Descriptor(
  name='SubscriptionInput',
  full_name='telemetry.SubscriptionInput',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='collector_list', full_name='telemetry.SubscriptionInput.collector_list', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=70,
  serialized_end=135,
)


_PATH = _descriptor.Descriptor(
  name='Path',
  full_name='telemetry.Path',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='telemetry.Path.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filter', full_name='telemetry.Path.filter', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='suppress_unchanged', full_name='telemetry.Path.suppress_unchanged', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_silent_interval', full_name='telemetry.Path.max_silent_interval', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sample_frequency', full_name='telemetry.Path.sample_frequency', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='need_eom', full_name='telemetry.Path.need_eom', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=138,
  serialized_end=275,
)


_SUBSCRIPTIONADDITIONALCONFIG = _descriptor.Descriptor(
  name='SubscriptionAdditionalConfig',
  full_name='telemetry.SubscriptionAdditionalConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='limit_records', full_name='telemetry.SubscriptionAdditionalConfig.limit_records', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='limit_time_seconds', full_name='telemetry.SubscriptionAdditionalConfig.limit_time_seconds', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='need_eos', full_name='telemetry.SubscriptionAdditionalConfig.need_eos', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=277,
  serialized_end=376,
)


_SUBSCRIPTIONREQUEST = _descriptor.Descriptor(
  name='SubscriptionRequest',
  full_name='telemetry.SubscriptionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='input', full_name='telemetry.SubscriptionRequest.input', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path_list', full_name='telemetry.SubscriptionRequest.path_list', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='additional_config', full_name='telemetry.SubscriptionRequest.additional_config', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=379,
  serialized_end=549,
)


_SUBSCRIPTIONRESPONSE = _descriptor.Descriptor(
  name='SubscriptionResponse',
  full_name='telemetry.SubscriptionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscription_id', full_name='telemetry.SubscriptionResponse.subscription_id', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=551,
  serialized_end=598,
)


_SUBSCRIPTIONREPLY = _descriptor.Descriptor(
  name='SubscriptionReply',
  full_name='telemetry.SubscriptionReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='telemetry.SubscriptionReply.response', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path_list', full_name='telemetry.SubscriptionReply.path_list', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=600,
  serialized_end=706,
)


_KEYVALUE = _descriptor.Descriptor(
  name='KeyValue',
  full_name='telemetry.KeyValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='telemetry.KeyValue.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='double_value', full_name='telemetry.KeyValue.double_value', index=1,
      number=5, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='int_value', full_name='telemetry.KeyValue.int_value', index=2,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uint_value', full_name='telemetry.KeyValue.uint_value', index=3,
      number=7, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sint_value', full_name='telemetry.KeyValue.sint_value', index=4,
      number=8, type=18, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bool_value', full_name='telemetry.KeyValue.bool_value', index=5,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='str_value', full_name='telemetry.KeyValue.str_value', index=6,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytes_value', full_name='telemetry.KeyValue.bytes_value', index=7,
      number=11, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='value', full_name='telemetry.KeyValue.value',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=709,
  serialized_end=896,
)


_OPENCONFIGDATA = _descriptor.Descriptor(
  name='OpenConfigData',
  full_name='telemetry.OpenConfigData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='system_id', full_name='telemetry.OpenConfigData.system_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='component_id', full_name='telemetry.OpenConfigData.component_id', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sub_component_id', full_name='telemetry.OpenConfigData.sub_component_id', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='telemetry.OpenConfigData.path', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='telemetry.OpenConfigData.sequence_number', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='telemetry.OpenConfigData.timestamp', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='kv', full_name='telemetry.OpenConfigData.kv', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='delete', full_name='telemetry.OpenConfigData.delete', index=7,
      number=8, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='eom', full_name='telemetry.OpenConfigData.eom', index=8,
      number=9, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sync_response', full_name='telemetry.OpenConfigData.sync_response', index=9,
      number=10, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=899,
  serialized_end=1160,
)


_DELETE = _descriptor.Descriptor(
  name='Delete',
  full_name='telemetry.Delete',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='telemetry.Delete.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1162,
  serialized_end=1184,
)


_EOM = _descriptor.Descriptor(
  name='Eom',
  full_name='telemetry.Eom',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='telemetry.Eom.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1186,
  serialized_end=1205,
)


_CANCELSUBSCRIPTIONREQUEST = _descriptor.Descriptor(
  name='CancelSubscriptionRequest',
  full_name='telemetry.CancelSubscriptionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscription_id', full_name='telemetry.CancelSubscriptionRequest.subscription_id', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1207,
  serialized_end=1259,
)


_CANCELSUBSCRIPTIONREPLY = _descriptor.Descriptor(
  name='CancelSubscriptionReply',
  full_name='telemetry.CancelSubscriptionReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='telemetry.CancelSubscriptionReply.code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code_str', full_name='telemetry.CancelSubscriptionReply.code_str', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1261,
  serialized_end=1341,
)


_GETSUBSCRIPTIONSREQUEST = _descriptor.Descriptor(
  name='GetSubscriptionsRequest',
  full_name='telemetry.GetSubscriptionsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscription_id', full_name='telemetry.GetSubscriptionsRequest.subscription_id', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1343,
  serialized_end=1393,
)


_GETSUBSCRIPTIONSREPLY = _descriptor.Descriptor(
  name='GetSubscriptionsReply',
  full_name='telemetry.GetSubscriptionsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscription_list', full_name='telemetry.GetSubscriptionsReply.subscription_list', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1395,
  serialized_end=1475,
)


_GETOPERATIONALSTATEREQUEST = _descriptor.Descriptor(
  name='GetOperationalStateRequest',
  full_name='telemetry.GetOperationalStateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscription_id', full_name='telemetry.GetOperationalStateRequest.subscription_id', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='verbosity', full_name='telemetry.GetOperationalStateRequest.verbosity', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1477,
  serialized_end=1576,
)


_GETOPERATIONALSTATEREPLY = _descriptor.Descriptor(
  name='GetOperationalStateReply',
  full_name='telemetry.GetOperationalStateReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='kv', full_name='telemetry.GetOperationalStateReply.kv', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1578,
  serialized_end=1637,
)


_DATAENCODINGREQUEST = _descriptor.Descriptor(
  name='DataEncodingRequest',
  full_name='telemetry.DataEncodingRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1639,
  serialized_end=1660,
)


_DATAENCODINGREPLY = _descriptor.Descriptor(
  name='DataEncodingReply',
  full_name='telemetry.DataEncodingReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='encoding_list', full_name='telemetry.DataEncodingReply.encoding_list', index=0,
      number=1, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1662,
  serialized_end=1729,
)

_SUBSCRIPTIONINPUT.fields_by_name['collector_list'].message_type = _COLLECTOR
_SUBSCRIPTIONREQUEST.fields_by_name['input'].message_type = _SUBSCRIPTIONINPUT
_SUBSCRIPTIONREQUEST.fields_by_name['path_list'].message_type = _PATH
_SUBSCRIPTIONREQUEST.fields_by_name['additional_config'].message_type = _SUBSCRIPTIONADDITIONALCONFIG
_SUBSCRIPTIONREPLY.fields_by_name['response'].message_type = _SUBSCRIPTIONRESPONSE
_SUBSCRIPTIONREPLY.fields_by_name['path_list'].message_type = _PATH
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['double_value'])
_KEYVALUE.fields_by_name['double_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['int_value'])
_KEYVALUE.fields_by_name['int_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['uint_value'])
_KEYVALUE.fields_by_name['uint_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['sint_value'])
_KEYVALUE.fields_by_name['sint_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['bool_value'])
_KEYVALUE.fields_by_name['bool_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['str_value'])
_KEYVALUE.fields_by_name['str_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_KEYVALUE.oneofs_by_name['value'].fields.append(
  _KEYVALUE.fields_by_name['bytes_value'])
_KEYVALUE.fields_by_name['bytes_value'].containing_oneof = _KEYVALUE.oneofs_by_name['value']
_OPENCONFIGDATA.fields_by_name['kv'].message_type = _KEYVALUE
_OPENCONFIGDATA.fields_by_name['delete'].message_type = _DELETE
_OPENCONFIGDATA.fields_by_name['eom'].message_type = _EOM
_CANCELSUBSCRIPTIONREPLY.fields_by_name['code'].enum_type = _RETURNCODE
_GETSUBSCRIPTIONSREPLY.fields_by_name['subscription_list'].message_type = _SUBSCRIPTIONREPLY
_GETOPERATIONALSTATEREQUEST.fields_by_name['verbosity'].enum_type = _VERBOSITYLEVEL
_GETOPERATIONALSTATEREPLY.fields_by_name['kv'].message_type = _KEYVALUE
_DATAENCODINGREPLY.fields_by_name['encoding_list'].enum_type = _ENCODINGTYPE
DESCRIPTOR.message_types_by_name['Collector'] = _COLLECTOR
DESCRIPTOR.message_types_by_name['SubscriptionInput'] = _SUBSCRIPTIONINPUT
DESCRIPTOR.message_types_by_name['Path'] = _PATH
DESCRIPTOR.message_types_by_name['SubscriptionAdditionalConfig'] = _SUBSCRIPTIONADDITIONALCONFIG
DESCRIPTOR.message_types_by_name['SubscriptionRequest'] = _SUBSCRIPTIONREQUEST
DESCRIPTOR.message_types_by_name['SubscriptionResponse'] = _SUBSCRIPTIONRESPONSE
DESCRIPTOR.message_types_by_name['SubscriptionReply'] = _SUBSCRIPTIONREPLY
DESCRIPTOR.message_types_by_name['KeyValue'] = _KEYVALUE
DESCRIPTOR.message_types_by_name['OpenConfigData'] = _OPENCONFIGDATA
DESCRIPTOR.message_types_by_name['Delete'] = _DELETE
DESCRIPTOR.message_types_by_name['Eom'] = _EOM
DESCRIPTOR.message_types_by_name['CancelSubscriptionRequest'] = _CANCELSUBSCRIPTIONREQUEST
DESCRIPTOR.message_types_by_name['CancelSubscriptionReply'] = _CANCELSUBSCRIPTIONREPLY
DESCRIPTOR.message_types_by_name['GetSubscriptionsRequest'] = _GETSUBSCRIPTIONSREQUEST
DESCRIPTOR.message_types_by_name['GetSubscriptionsReply'] = _GETSUBSCRIPTIONSREPLY
DESCRIPTOR.message_types_by_name['GetOperationalStateRequest'] = _GETOPERATIONALSTATEREQUEST
DESCRIPTOR.message_types_by_name['GetOperationalStateReply'] = _GETOPERATIONALSTATEREPLY
DESCRIPTOR.message_types_by_name['DataEncodingRequest'] = _DATAENCODINGREQUEST
DESCRIPTOR.message_types_by_name['DataEncodingReply'] = _DATAENCODINGREPLY
DESCRIPTOR.enum_types_by_name['ReturnCode'] = _RETURNCODE
DESCRIPTOR.enum_types_by_name['VerbosityLevel'] = _VERBOSITYLEVEL
DESCRIPTOR.enum_types_by_name['EncodingType'] = _ENCODINGTYPE

Collector = _reflection.GeneratedProtocolMessageType('Collector', (_message.Message,), dict(
  DESCRIPTOR = _COLLECTOR,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.Collector)
  ))
_sym_db.RegisterMessage(Collector)

SubscriptionInput = _reflection.GeneratedProtocolMessageType('SubscriptionInput', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONINPUT,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.SubscriptionInput)
  ))
_sym_db.RegisterMessage(SubscriptionInput)

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), dict(
  DESCRIPTOR = _PATH,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.Path)
  ))
_sym_db.RegisterMessage(Path)

SubscriptionAdditionalConfig = _reflection.GeneratedProtocolMessageType('SubscriptionAdditionalConfig', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONADDITIONALCONFIG,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.SubscriptionAdditionalConfig)
  ))
_sym_db.RegisterMessage(SubscriptionAdditionalConfig)

SubscriptionRequest = _reflection.GeneratedProtocolMessageType('SubscriptionRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONREQUEST,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.SubscriptionRequest)
  ))
_sym_db.RegisterMessage(SubscriptionRequest)

SubscriptionResponse = _reflection.GeneratedProtocolMessageType('SubscriptionResponse', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONRESPONSE,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.SubscriptionResponse)
  ))
_sym_db.RegisterMessage(SubscriptionResponse)

SubscriptionReply = _reflection.GeneratedProtocolMessageType('SubscriptionReply', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONREPLY,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.SubscriptionReply)
  ))
_sym_db.RegisterMessage(SubscriptionReply)

KeyValue = _reflection.GeneratedProtocolMessageType('KeyValue', (_message.Message,), dict(
  DESCRIPTOR = _KEYVALUE,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.KeyValue)
  ))
_sym_db.RegisterMessage(KeyValue)

OpenConfigData = _reflection.GeneratedProtocolMessageType('OpenConfigData', (_message.Message,), dict(
  DESCRIPTOR = _OPENCONFIGDATA,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.OpenConfigData)
  ))
_sym_db.RegisterMessage(OpenConfigData)

Delete = _reflection.GeneratedProtocolMessageType('Delete', (_message.Message,), dict(
  DESCRIPTOR = _DELETE,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.Delete)
  ))
_sym_db.RegisterMessage(Delete)

Eom = _reflection.GeneratedProtocolMessageType('Eom', (_message.Message,), dict(
  DESCRIPTOR = _EOM,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.Eom)
  ))
_sym_db.RegisterMessage(Eom)

CancelSubscriptionRequest = _reflection.GeneratedProtocolMessageType('CancelSubscriptionRequest', (_message.Message,), dict(
  DESCRIPTOR = _CANCELSUBSCRIPTIONREQUEST,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.CancelSubscriptionRequest)
  ))
_sym_db.RegisterMessage(CancelSubscriptionRequest)

CancelSubscriptionReply = _reflection.GeneratedProtocolMessageType('CancelSubscriptionReply', (_message.Message,), dict(
  DESCRIPTOR = _CANCELSUBSCRIPTIONREPLY,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.CancelSubscriptionReply)
  ))
_sym_db.RegisterMessage(CancelSubscriptionReply)

GetSubscriptionsRequest = _reflection.GeneratedProtocolMessageType('GetSubscriptionsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSUBSCRIPTIONSREQUEST,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.GetSubscriptionsRequest)
  ))
_sym_db.RegisterMessage(GetSubscriptionsRequest)

GetSubscriptionsReply = _reflection.GeneratedProtocolMessageType('GetSubscriptionsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSUBSCRIPTIONSREPLY,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.GetSubscriptionsReply)
  ))
_sym_db.RegisterMessage(GetSubscriptionsReply)

GetOperationalStateRequest = _reflection.GeneratedProtocolMessageType('GetOperationalStateRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETOPERATIONALSTATEREQUEST,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.GetOperationalStateRequest)
  ))
_sym_db.RegisterMessage(GetOperationalStateRequest)

GetOperationalStateReply = _reflection.GeneratedProtocolMessageType('GetOperationalStateReply', (_message.Message,), dict(
  DESCRIPTOR = _GETOPERATIONALSTATEREPLY,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.GetOperationalStateReply)
  ))
_sym_db.RegisterMessage(GetOperationalStateReply)

DataEncodingRequest = _reflection.GeneratedProtocolMessageType('DataEncodingRequest', (_message.Message,), dict(
  DESCRIPTOR = _DATAENCODINGREQUEST,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.DataEncodingRequest)
  ))
_sym_db.RegisterMessage(DataEncodingRequest)

DataEncodingReply = _reflection.GeneratedProtocolMessageType('DataEncodingReply', (_message.Message,), dict(
  DESCRIPTOR = _DATAENCODINGREPLY,
  __module__ = 'agent_pb2'
  # @@protoc_insertion_point(class_scope:telemetry.DataEncodingReply)
  ))
_sym_db.RegisterMessage(DataEncodingReply)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class OpenConfigTelemetryStub(object):
    """Interface exported by Agent
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.telemetrySubscribe = channel.unary_stream(
          '/telemetry.OpenConfigTelemetry/telemetrySubscribe',
          request_serializer=SubscriptionRequest.SerializeToString,
          response_deserializer=OpenConfigData.FromString,
          )
      self.cancelTelemetrySubscription = channel.unary_unary(
          '/telemetry.OpenConfigTelemetry/cancelTelemetrySubscription',
          request_serializer=CancelSubscriptionRequest.SerializeToString,
          response_deserializer=CancelSubscriptionReply.FromString,
          )
      self.getTelemetrySubscriptions = channel.unary_unary(
          '/telemetry.OpenConfigTelemetry/getTelemetrySubscriptions',
          request_serializer=GetSubscriptionsRequest.SerializeToString,
          response_deserializer=GetSubscriptionsReply.FromString,
          )
      self.getTelemetryOperationalState = channel.unary_unary(
          '/telemetry.OpenConfigTelemetry/getTelemetryOperationalState',
          request_serializer=GetOperationalStateRequest.SerializeToString,
          response_deserializer=GetOperationalStateReply.FromString,
          )
      self.getDataEncodings = channel.unary_unary(
          '/telemetry.OpenConfigTelemetry/getDataEncodings',
          request_serializer=DataEncodingRequest.SerializeToString,
          response_deserializer=DataEncodingReply.FromString,
          )


  class OpenConfigTelemetryServicer(object):
    """Interface exported by Agent
    """

    def telemetrySubscribe(self, request, context):
      """Request an inline subscription for data at the specified path.
      The device should send telemetry data back on the same
      connection as the subscription request.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cancelTelemetrySubscription(self, request, context):
      """Terminates and removes an exisiting telemetry subscription
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getTelemetrySubscriptions(self, request, context):
      """Get the list of current telemetry subscriptions from the
      target. This command returns a list of existing subscriptions
      not including those that are established via configuration.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getTelemetryOperationalState(self, request, context):
      """Get Telemetry Agent Operational States
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDataEncodings(self, request, context):
      """Return the set of data encodings supported by the device for
      telemetry data
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_OpenConfigTelemetryServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'telemetrySubscribe': grpc.unary_stream_rpc_method_handler(
            servicer.telemetrySubscribe,
            request_deserializer=SubscriptionRequest.FromString,
            response_serializer=OpenConfigData.SerializeToString,
        ),
        'cancelTelemetrySubscription': grpc.unary_unary_rpc_method_handler(
            servicer.cancelTelemetrySubscription,
            request_deserializer=CancelSubscriptionRequest.FromString,
            response_serializer=CancelSubscriptionReply.SerializeToString,
        ),
        'getTelemetrySubscriptions': grpc.unary_unary_rpc_method_handler(
            servicer.getTelemetrySubscriptions,
            request_deserializer=GetSubscriptionsRequest.FromString,
            response_serializer=GetSubscriptionsReply.SerializeToString,
        ),
        'getTelemetryOperationalState': grpc.unary_unary_rpc_method_handler(
            servicer.getTelemetryOperationalState,
            request_deserializer=GetOperationalStateRequest.FromString,
            response_serializer=GetOperationalStateReply.SerializeToString,
        ),
        'getDataEncodings': grpc.unary_unary_rpc_method_handler(
            servicer.getDataEncodings,
            request_deserializer=DataEncodingRequest.FromString,
            response_serializer=DataEncodingReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'telemetry.OpenConfigTelemetry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaOpenConfigTelemetryServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by Agent
    """
    def telemetrySubscribe(self, request, context):
      """Request an inline subscription for data at the specified path.
      The device should send telemetry data back on the same
      connection as the subscription request.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cancelTelemetrySubscription(self, request, context):
      """Terminates and removes an exisiting telemetry subscription
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getTelemetrySubscriptions(self, request, context):
      """Get the list of current telemetry subscriptions from the
      target. This command returns a list of existing subscriptions
      not including those that are established via configuration.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getTelemetryOperationalState(self, request, context):
      """Get Telemetry Agent Operational States
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDataEncodings(self, request, context):
      """Return the set of data encodings supported by the device for
      telemetry data
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaOpenConfigTelemetryStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by Agent
    """
    def telemetrySubscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Request an inline subscription for data at the specified path.
      The device should send telemetry data back on the same
      connection as the subscription request.
      """
      raise NotImplementedError()
    def cancelTelemetrySubscription(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Terminates and removes an exisiting telemetry subscription
      """
      raise NotImplementedError()
    cancelTelemetrySubscription.future = None
    def getTelemetrySubscriptions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the list of current telemetry subscriptions from the
      target. This command returns a list of existing subscriptions
      not including those that are established via configuration.
      """
      raise NotImplementedError()
    getTelemetrySubscriptions.future = None
    def getTelemetryOperationalState(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get Telemetry Agent Operational States
      """
      raise NotImplementedError()
    getTelemetryOperationalState.future = None
    def getDataEncodings(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Return the set of data encodings supported by the device for
      telemetry data
      """
      raise NotImplementedError()
    getDataEncodings.future = None


  def beta_create_OpenConfigTelemetry_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('telemetry.OpenConfigTelemetry', 'cancelTelemetrySubscription'): CancelSubscriptionRequest.FromString,
      ('telemetry.OpenConfigTelemetry', 'getDataEncodings'): DataEncodingRequest.FromString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetryOperationalState'): GetOperationalStateRequest.FromString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetrySubscriptions'): GetSubscriptionsRequest.FromString,
      ('telemetry.OpenConfigTelemetry', 'telemetrySubscribe'): SubscriptionRequest.FromString,
    }
    response_serializers = {
      ('telemetry.OpenConfigTelemetry', 'cancelTelemetrySubscription'): CancelSubscriptionReply.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getDataEncodings'): DataEncodingReply.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetryOperationalState'): GetOperationalStateReply.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetrySubscriptions'): GetSubscriptionsReply.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'telemetrySubscribe'): OpenConfigData.SerializeToString,
    }
    method_implementations = {
      ('telemetry.OpenConfigTelemetry', 'cancelTelemetrySubscription'): face_utilities.unary_unary_inline(servicer.cancelTelemetrySubscription),
      ('telemetry.OpenConfigTelemetry', 'getDataEncodings'): face_utilities.unary_unary_inline(servicer.getDataEncodings),
      ('telemetry.OpenConfigTelemetry', 'getTelemetryOperationalState'): face_utilities.unary_unary_inline(servicer.getTelemetryOperationalState),
      ('telemetry.OpenConfigTelemetry', 'getTelemetrySubscriptions'): face_utilities.unary_unary_inline(servicer.getTelemetrySubscriptions),
      ('telemetry.OpenConfigTelemetry', 'telemetrySubscribe'): face_utilities.unary_stream_inline(servicer.telemetrySubscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_OpenConfigTelemetry_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('telemetry.OpenConfigTelemetry', 'cancelTelemetrySubscription'): CancelSubscriptionRequest.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getDataEncodings'): DataEncodingRequest.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetryOperationalState'): GetOperationalStateRequest.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetrySubscriptions'): GetSubscriptionsRequest.SerializeToString,
      ('telemetry.OpenConfigTelemetry', 'telemetrySubscribe'): SubscriptionRequest.SerializeToString,
    }
    response_deserializers = {
      ('telemetry.OpenConfigTelemetry', 'cancelTelemetrySubscription'): CancelSubscriptionReply.FromString,
      ('telemetry.OpenConfigTelemetry', 'getDataEncodings'): DataEncodingReply.FromString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetryOperationalState'): GetOperationalStateReply.FromString,
      ('telemetry.OpenConfigTelemetry', 'getTelemetrySubscriptions'): GetSubscriptionsReply.FromString,
      ('telemetry.OpenConfigTelemetry', 'telemetrySubscribe'): OpenConfigData.FromString,
    }
    cardinalities = {
      'cancelTelemetrySubscription': cardinality.Cardinality.UNARY_UNARY,
      'getDataEncodings': cardinality.Cardinality.UNARY_UNARY,
      'getTelemetryOperationalState': cardinality.Cardinality.UNARY_UNARY,
      'getTelemetrySubscriptions': cardinality.Cardinality.UNARY_UNARY,
      'telemetrySubscribe': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'telemetry.OpenConfigTelemetry', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
