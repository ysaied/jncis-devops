# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import jnx_management_service_pb2 as jnx__management__service__pb2


class ManagementStub(object):
    """[brief]: Junos configuration and operational management service.
    [detail]: Junos configuration and operational management service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpCommandGet = channel.unary_stream(
                '/jnx.jet.management.Management/OpCommandGet',
                request_serializer=jnx__management__service__pb2.OpCommandGetRequest.SerializeToString,
                response_deserializer=jnx__management__service__pb2.OpCommandGetResponse.FromString,
                )
        self.ConfigSet = channel.unary_unary(
                '/jnx.jet.management.Management/ConfigSet',
                request_serializer=jnx__management__service__pb2.ConfigSetRequest.SerializeToString,
                response_deserializer=jnx__management__service__pb2.ConfigSetResponse.FromString,
                )
        self.EphemeralConfigGet = channel.unary_unary(
                '/jnx.jet.management.Management/EphemeralConfigGet',
                request_serializer=jnx__management__service__pb2.EphemeralConfigGetRequest.SerializeToString,
                response_deserializer=jnx__management__service__pb2.EphemeralConfigGetResponse.FromString,
                )
        self.EphemeralConfigSet = channel.unary_unary(
                '/jnx.jet.management.Management/EphemeralConfigSet',
                request_serializer=jnx__management__service__pb2.EphemeralConfigSetRequest.SerializeToString,
                response_deserializer=jnx__management__service__pb2.EphemeralConfigSetResponse.FromString,
                )


class ManagementServicer(object):
    """[brief]: Junos configuration and operational management service.
    [detail]: Junos configuration and operational management service.
    """

    def OpCommandGet(self, request, context):
        """[brief]: Run an operational command
        [detail]: This RPC returns the operational command output as a streamed response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigSet(self, request, context):
        """[brief]: Perform configuration operation on static database
        [detail]: Load and commit configuration onto a Junos device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EphemeralConfigGet(self, request, context):
        """[brief]: Retrieve epehemral configuration from the device
        [detail]: Retrieve epehemral configuration from the device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EphemeralConfigSet(self, request, context):
        """[brief]: Perform configuration operation on the ephemeral database
        [detail]: Load and commit configuration onto Junos device's epehemral database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpCommandGet': grpc.unary_stream_rpc_method_handler(
                    servicer.OpCommandGet,
                    request_deserializer=jnx__management__service__pb2.OpCommandGetRequest.FromString,
                    response_serializer=jnx__management__service__pb2.OpCommandGetResponse.SerializeToString,
            ),
            'ConfigSet': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigSet,
                    request_deserializer=jnx__management__service__pb2.ConfigSetRequest.FromString,
                    response_serializer=jnx__management__service__pb2.ConfigSetResponse.SerializeToString,
            ),
            'EphemeralConfigGet': grpc.unary_unary_rpc_method_handler(
                    servicer.EphemeralConfigGet,
                    request_deserializer=jnx__management__service__pb2.EphemeralConfigGetRequest.FromString,
                    response_serializer=jnx__management__service__pb2.EphemeralConfigGetResponse.SerializeToString,
            ),
            'EphemeralConfigSet': grpc.unary_unary_rpc_method_handler(
                    servicer.EphemeralConfigSet,
                    request_deserializer=jnx__management__service__pb2.EphemeralConfigSetRequest.FromString,
                    response_serializer=jnx__management__service__pb2.EphemeralConfigSetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jnx.jet.management.Management', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Management(object):
    """[brief]: Junos configuration and operational management service.
    [detail]: Junos configuration and operational management service.
    """

    @staticmethod
    def OpCommandGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jnx.jet.management.Management/OpCommandGet',
            jnx__management__service__pb2.OpCommandGetRequest.SerializeToString,
            jnx__management__service__pb2.OpCommandGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jnx.jet.management.Management/ConfigSet',
            jnx__management__service__pb2.ConfigSetRequest.SerializeToString,
            jnx__management__service__pb2.ConfigSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EphemeralConfigGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jnx.jet.management.Management/EphemeralConfigGet',
            jnx__management__service__pb2.EphemeralConfigGetRequest.SerializeToString,
            jnx__management__service__pb2.EphemeralConfigGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EphemeralConfigSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jnx.jet.management.Management/EphemeralConfigSet',
            jnx__management__service__pb2.EphemeralConfigSetRequest.SerializeToString,
            jnx__management__service__pb2.EphemeralConfigSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
